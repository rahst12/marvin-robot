<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Phidget21.NET</name>
    </assembly>
    <members>
        <member name="T:Phidgets.RFID">
            <summary>
            This class represents a Phidget RFID Reader. All methods to read tags and set outputs on the RFID reader are implemented in this class.
            </summary>
            <remarks>
            The Phidget RFID reader can read one tag at a time. Both tag and tagloss event handlers are provided, as well as control over the antenna so that multiple readers can exists in close proximity without interference.
            </remarks>
        </member>
        <member name="T:Phidgets.Phidget">
            <summary>
            This is the base class from which all Phidget device classes derive.
            </summary>
            <remarks>
            Don't create phidget devices directly using this class. Use the specific class for the device that you wish to access.
            </remarks>
        </member>
        <member name="M:Phidgets.Phidget.OnAttach(Phidgets.Events.AttachEventArgs)">
            <summary>
            The On Attach method is a method that will be called when the phidget is attached to the machine.
            </summary>
            <remarks>
            This method will envoke all the hooked AttachEventHandler methods with the appropriate data.
            </remarks>
            <param name="e">AttachEventArgs object containing the data relating to the attach event.</param>
        </member>
        <member name="M:Phidgets.Phidget.OnDetach(Phidgets.Events.DetachEventArgs)">
            <summary>
            The On Detach method is a method that will be called when the phidget is attached to the machine.
            </summary>
            <remarks>
            This method will envoke all the hooked DetachEventHandler methods with the appropriate data.
            </remarks>
            <param name="e">DetachEventArgs object containing the data relating to the detach event.</param>
        </member>
        <member name="M:Phidgets.Phidget.OnError(Phidgets.Events.ErrorEventArgs)">
            <summary>
            The On Error method is a method that will be called when the phidget is attached to the machine.
            </summary>
            <remarks>
            This method will envoke all the hooked ErrorEventHandler methods with the appropriate data.
            </remarks>
            <param name="e">ErrorEventArgs object containing the data relating to the error event.</param>
        </member>
        <member name="M:Phidgets.Phidget.#ctor">
            <summary>
            Default Class constructor.
            </summary>
            <remarks>
            This constructor is to be used only by subclasses, as the Phidget calss should never need to be instatiated directly by the user.
            </remarks>
        </member>
        <member name="M:Phidgets.Phidget.open(System.Int32)">
            <summary>
            Open this Phidget with a specific serial number.
            </summary>
            <remarks>
            <para>Open is pervasive. What this means is that you can call open on a device before it is plugged in, and keep the device opened across device dis- and re-connections.</para>
            <para>Open is Asynchronous. What this means is that open will return immediately – before the device being opened is actually available, so you need to use either the attach event or the waitForAttachment method to determine if a device is available before using it.</para>
            <para>This version of open specifies a serial number - The serial number is a unique number assigned to each Phidget during production and can be used to uniquely identify specific phidgets. use openAny to open a device without specifying the serial number.</para>
            </remarks>
            <param name="serialNumber">The Serial Number</param>
            <exception cref="T:Phidgets.PhidgetException"></exception>
        </member>
        <member name="M:Phidgets.Phidget.open">
            <summary>
            Open a Phidget without a serial number.
            </summary>
            <remarks>
            The first available Phidget will be opened. If there are two Phidgets of the same type attached to the system, you should specify a serial number, as there is no guarantee which Phidget will be selected by the call to open().
            </remarks>
            <exception cref="T:Phidgets.PhidgetException"></exception>
        </member>
        <member name="M:Phidgets.Phidget.open(System.String,System.Int32)">
            <summary>
            Open a Phidget remotely using an IP Address, without a serial number.
            </summary>
            <remarks>
            This method is the same as open(int serialNumber, string IPAddress, int port), except that it specifies no serial number. Therefore, the first available Phidget will be opened. If there are two Phidgets of the same type attached to the system, you should specify a serial number, as there is no guarantee which Phidget will be selected by the call to open().
            </remarks>
            <seealso cref="M:Phidgets.Phidget.open(int serialNumber, string IPAddress, int port)"/>
            <param name="IPAddress">The server IP address.</param>
            <param name="port">The server port.</param>
            <exception cref="T:Phidgets.PhidgetException"></exception>
        </member>
        <member name="M:Phidgets.Phidget.open(System.Int32,System.String,System.Int32)">
            <summary>
            Open this Phidget remotely using an IP Address, and a specific serial number.
            </summary>
            <remarks>
            <para>This version of open is network based, and relies on the Phidget Webservice running at the specified Address and Port before open is called.</para>
            <para>Open is pervasive. What this means is that you can call open on a device before it is plugged in, and keep the device opened across device dis- and re-connections.</para>
            <para>Open is Asynchronous. What this means is that open will return immediately – before the device being opened is actually available, so you need to use either the attach event or the waitForAttachment method to determine if a device is available before using it.</para>
            <para>This version of open specifies a serial number - The serial number is a unique number assigned to each Phidget during production and can be used to uniquely identify specific phidgets. use <see>open(string IPAddress, int port)</see> to open a device without specifying the serial number.</para>
            </remarks>
            <param name="serialNumber">The Serial Number</param>
            <param name="IPAddress">IP Address or hostname of the Phidget Webservice</param>
            <param name="port">Port of the Phidget Webservice</param>
            <exception cref="T:Phidgets.PhidgetException">if the Phidget Webservice cannot be contacted</exception>
        </member>
        <member name="M:Phidgets.Phidget.open(System.String)">
            <summary>
            Open a Phidget remotely using a Server ID, without a serial number.
            </summary>
            <remarks>
            This method is the same as open(int serialNumber, string ServerID), except that it specifies no serial number. Therefore, the first available Phidget will be opened. If there are two Phidgets of the same type attached to the system, you should specify a serial number, as there is no guarantee which Phidget will be selected by the call to open().
            </remarks>
            <seealso cref="M:Phidgets.Phidget.open(int serialNumber, string ServerID)"/>
            <param name="ServerID">The Server ID</param>
            <exception cref="T:Phidgets.PhidgetException"></exception>
        </member>
        <member name="M:Phidgets.Phidget.open(System.Int32,System.String)">
            <summary>
            Open this Phidget remotely using a Server ID, and a specific serial number.
            </summary>
            <remarks>
            <para>This version of open is network based.</para>
            <para>Open is pervasive. What this means is that you can call open on a device before it is plugged in, and keep the device opened across device dis- and re-connections.</para>
            <para>Open is Asynchronous. What this means is that open will return immediately – before the device being opened is actually available, so you need to use either the attach event or the waitForAttachment method to determine if a device is available before using it.</para>
            <para>This version of open specifies a serial number - The serial number is a unique number assigned to each Phidget during production and can be used to uniquely identify specific phidgets. use <see>open(string ServerID)</see> to open a device without specifying the serial number.</para>
            </remarks>
            <param name="serialNumber">The Serial Number</param>
            <param name="ServerID">ServerID of the Phidget Webservice</param>
            <exception cref="T:Phidgets.PhidgetException"></exception>
        </member>
        <member name="M:Phidgets.Phidget.open(System.String,System.Int32,System.String)">
            <summary>
            Open a Phidget remotely and securely, using an IP Address, without a serial number.
            </summary>
            <remarks>
            This method is the same as open(int serialNumber, string IPAddress, int port, String password), except that it specifies no serial number. Therefore, the first available Phidget will be opened. If there are two Phidgets of the same type attached to the system, you should specify a serial number, as there is no guarantee which Phidget will be selected by the call to open().
            </remarks>
            <seealso cref="M:Phidgets.Phidget.open(int serialNumber, string IPAddress, int port, String password)"/>
            <param name="IPAddress">IP Address or hostname of the Phidget Webservice</param>
            <param name="port">Port of the Phidget Webservice</param>
            <param name="password">The secure password for the Phidget Webservice</param>
            <exception cref="T:Phidgets.PhidgetException">if the Phidget Webservice cannot be contacted</exception>
        </member>
        <member name="M:Phidgets.Phidget.open(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Open this Phidget remotely and securely, using an IP Address, and a specific serial number.
            </summary>
            <remarks>
            This method is the same as open(int serialNumber, string IPAddress, int port), except that it specifies a password. This password can be set as a parameter when starting the Phidget Webservice.
            </remarks>
            <seealso cref="M:Phidgets.Phidget.open(int serialNumber, string IPAddress, int port)"/>
            <param name="serialNumber">The Serial Number</param>
            <param name="IPAddress">IP Address or hostname of the Phidget Webservice</param>
            <param name="port">Port of the Phidget Webservice</param>
            <param name="password">The secure password for the Phidget Webservice</param>
            <exception cref="T:Phidgets.PhidgetException">if the Phidget Webservice cannot be contacted</exception>
        </member>
        <member name="M:Phidgets.Phidget.open(System.String,System.String)">
            <summary>
            Open this Phidget remotely and securely, using a Server ID, without a serial number.
            </summary>
            <remarks>
            This method is the same as open(int serialNumber, string ServerID, String password), except that it specifies no serial number. Therefore, the first available Phidget will be opened. If there are two Phidgets of the same type attached to the system, you should specify a serial number, as there is no guarantee which Phidget will be selected by the call to open().
            </remarks>
            <seealso cref="M:Phidgets.Phidget.open(int serialNumber, string ServerID, String password)"/>
            <param name="ServerID">ServerID of the Phidget Webservice</param>
            <param name="password">The secure password for the Phidget Webservice</param>
            <exception cref="T:Phidgets.PhidgetException">if the Phidget Webservice cannot be contacted</exception>
        </member>
        <member name="M:Phidgets.Phidget.open(System.Int32,System.String,System.String)">
            <summary>
            Open this Phidget remotely and securely, using a Server ID, and a specific serial number.
            </summary>
            <remarks>
            This method is the same as open(int serialNumber, string ServerID), except that it specifies a password. This password can be set as a parameter when starting the Phidget Webservice.
            </remarks>
            <seealso cref="M:Phidgets.Phidget.open(int serialNumber, string ServerID)"/>
            <param name="serialNumber">The serial number</param>
            <param name="ServerID">ServerID of the Phidget Webservice</param>
            <param name="password">The secure password for the Phidget Webservice</param>
            <exception cref="T:Phidgets.PhidgetException">if the Phidget Webservice cannot be contacted</exception>
        </member>
        <member name="M:Phidgets.Phidget.waitForAttachment">
            <summary>
            Waits for this Phidget to become available.
            </summary>
            <remarks>
            <para>This method can be called after open has been called to wait for thid Phidget to become available. This is usefull because open is asynchronous (and thus returns immediately), and most methods will throw a PhidgetException is they are called before a device is actually ready. This method is synonymous with polling the isAttached method until it returns True, or using the Attach event.</para>
            <para>This method blocks indefinitely until the Phidget becomes available. This can be quite some time (forever), if the Phidget is never plugged in.</para>
            <para>This method uses the attach handler internally to determine when the Phidget becomes available.</para>
            </remarks>
        </member>
        <member name="M:Phidgets.Phidget.waitForAttachment(System.Int32)">
            <summary>
            Waits for this Phidget to become available after the specified time.
            </summary>
            <remarks>
            <para>This method can be called after open has been called to wait for thid Phidget to become available. This is usefull because open is asynchronous (and thus returns immediately), and most methods will throw a PhidgetException is they are called before a device is actually ready. This method is synonymous with polling the isAttached method until it returns True, or using the Attach event.</para>
            <para>This method blocks indefinitely until the Phidget becomes available. This can be quite some time (forever), if the Phidget is never plugged in.</para>
            <para>This method uses the attach handler internally to determine when the Phidget becomes available.</para>
            </remarks>
            <param name="milliseconds">Specified wait time in milliseconds</param>
        </member>
        <member name="M:Phidgets.Phidget.close">
            <summary>
            Closes this Phidget.
            </summary>
            <remarks>
            This will shut down all threads dealing with this Phidget and you won't recieve any more events.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened.</exception>
        </member>
        <member name="M:Phidgets.Phidget.Equals(System.Object)">
            <summary>
            Compares two Phidgets.
            </summary>
            <remarks>
            This method compares two Phidgets using serial number, device type and version.
            </remarks>
            <param name="comp">The object to compare this object to.</param>
            <returns>True if they are equal, false if they are different.</returns>
        </member>
        <member name="M:Phidgets.Phidget.GetHashCode">
            <summary>
            Returns this objects hash code.
            </summary>
            <remarks>
            In this overriden case for Phidget objects, the hashcode returned is the device serial number
            </remarks>
            <returns>The device serial number</returns>
        </member>
        <member name="P:Phidgets.Phidget.LibraryVersion">
            <summary>
            Gets the library version.
            </summary>
            <remarks>
            <para>This is the library version of the underlying phidget21 C library and not the version of the JNI wrapper implementation.</para>
            <para>The version is retured as a string which contains the version number and build date.</para>
            </remarks>
            <value>The Library Version</value>
            <returns>The Library Version</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.Phidget.SerialNumber">
            <summary>
            Gets the unique serial number of this Phidget.
            </summary>
            <remarks>
            This number is set during manufacturing, and is unique across all Phidgets. This number can be used in calls to open to specify this specific Phidget to be opened.
            </remarks>
            <value>The Serial Number</value>
            <returns>The Serial Number</returns>
        </member>
        <member name="P:Phidgets.Phidget.Version">
            <summary>
            Gets the device version of this Phidget.
            </summary>
            <remarks>
            This number is simply a way of distinguishing between different revisions of a specific type of Phidget, and is only really of use if you need to troubleshoot device problems with Phidgets Inc.
            </remarks>
            <value>The Version</value>
            <returns>The Version</returns>
        </member>
        <member name="P:Phidgets.Phidget.Attached">
            <summary>
            Gets the attached status of this Phidget.
            </summary>
            <remarks>
            This method returns True or False, depending on whether the Phidget is phisically plugged into the computer, initialized, and ready to use - or not. If a Phidget is not attached, many functions calls will fail with a PhidgetException, so either checking this function, or using the Attach and Detach events, is recommended, if a device is likely to be attached or detached during use.
            </remarks>
            <value>The Attached Status</value>
            <returns>The Attached Status</returns>
        </member>
        <member name="P:Phidgets.Phidget.Name">
            <summary>
            Gets the name of this Phidget.
            </summary>
            <remarks>
            <para>This is a string that describes the device. For example, a PhidgetInterfaceKit could be described as “Phidget InterfaceKit 8/8/8”, or “Phidget InterfaceKit 0/0/4”, among others, depending on the specific device.</para>
            <para>This lets you determine the specific type of a Phidget, within the broader classes of Phidgets, such as PhidgetInterfaceKit, or PhidgetServo</para>
            </remarks>
            <value>The Device Name</value>
            <returns>The Device Name</returns>
        </member>
        <member name="P:Phidgets.Phidget.Type">
            <summary>
            Gets the device type of this Phidget.
            </summary>
            <remarks>
            <para>This is a string that describes the device as a class of devices. For example, all PhidgetInterfaceKit Phidgets will returns the String "PhidgetInterfaceKit".</para>
            <para>This function is mostly usefull if you are using the Phidget Manager because it's attach and detach handlers return {link com.phidgets.phidget phidget} objects, and you can use this method to determine their proper type.</para>
            </remarks>
            <value>The Device Type</value>
            <returns>THe Device Type</returns>
        </member>
        <member name="P:Phidgets.Phidget.AttachedToServer">
            <summary>
            Gets the attached to server status of this Phidget.
            </summary>
            <remarks>
            See <see cref="P:Phidgets.Phidget.Attached">Attached</see> Property
            </remarks>
            <value>the attached to server status</value>
            <returns>the attached to server status</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened or server could not be reached.</exception>
        </member>
        <member name="P:Phidgets.Phidget.Label">
            <summary>
            Gets and sets the label associated with this Phidget.
            </summary>
            <remarks>
            This label is a String - up to ten digits - that is stored in the Flash memory of newer Phidgets. This label can be set programatically, and is non-volatile - so it is remembered even if the Phidget is unplugged.
            </remarks>
            <value>The Device Label</value>
            <returns>The Device Label</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if this Phidget does not support labels.</exception>
        </member>
        <member name="P:Phidgets.Phidget.Address">
            <summary>
            Gets the Address of a Phidget Webservice when this Phidget was opened as remote.
            </summary>
            <remarks>
            This may be an IP Address or a hostname.
            </remarks>
            <value>The Server Address</value>
            <returns>The Server Address</returns>
            <exception cref="T:Phidgets.PhidgetException">if this Phidget was not opened as a remote Phidget.</exception>
        </member>
        <member name="P:Phidgets.Phidget.ServerID">
            <summary>
            Gets the Server ID of a Phidget Webservice when this Phidget was opened as remote.
            </summary>
            <remarks>
            This is an arbitrary server identifier, independant of IP address and Port.
            </remarks>
            <value>The Server ID</value>
            <returns>The Server ID</returns>
            <exception cref="T:Phidgets.PhidgetException">if this Phidget was not opened as a remote Phidget.</exception>
        </member>
        <member name="P:Phidgets.Phidget.Port">
            <summary>
            Gets the Port of a Phidget Webservice when this Phidget was opened as remote.
            </summary>
            <value>The Server Port</value>
            <returns>The Server Port</returns>
            <exception cref="T:Phidgets.PhidgetException">if this Phidget was not opened as a remote Phidget.</exception>
        </member>
        <member name="E:Phidgets.Phidget.Attach">
            <summary>
            Handler for Attach Events.
            </summary>
            <remarks>
            <para>Will hook to user implemented AttachEventHandler methods that will be called when the event is triggered.</para>
            <para>The attach handler is a method that will be called when this Phidget is phisically attached to the system, and has gone through its initalization, and so is ready to be used.</para>
            <para>There is no limit on the number of attach handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.Phidget.Detach">
            <summary>
            Handler for Detach Events.
            </summary>
            <remarks>
            <para>Will hook to user implemented DetachEventHandler methods that will be called when the event is triggered.</para>
            <para>The detach handler is a method that will be called when this Phidget is phisically detached from the system, and is no longer available. This is particularly usefull for applications when a phisical detach would be expected.</para>
            <para>Remember that many of the methods, if called on an unattached device, will throw a PhidgetException. This Exception can be checked to see if it was caused by a device being unattached, but a better method would be to regiter the detach handler, which could notify the main program logic that the device is no longer available, disable GUI controls, etc.</para>
            <para>There is no limit on the number of detach handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.Phidget.Error">
            <summary>
            Handler for Error Events.
            </summary>
            <remarks>
            <para>Will hook to user implemented ErrorEventHandler methods that will be called when the event is triggered.</para>
            <para>The error handler is a method that will be called when an asynchronous error occurs. Error events are not currently used, but will be in the future to report any problems that happen out of context from a direct function call.</para>
            <para>There is no limit on the number of error handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="F:Phidgets.RFID.outputs">
            <summary>
            The collection of available digital outputs.
            </summary>
            <remarks>
            Phidget RFID readers have 0 or more outputs.
            </remarks>
        </member>
        <member name="M:Phidgets.RFID.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>
            Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.
            </remarks>
        </member>
        <member name="M:Phidgets.RFID.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>
            Will attempt to close the phidget if it has yet to be closed.
            </remarks>
        </member>
        <member name="M:Phidgets.RFID.OnTag(Phidgets.Events.TagEventArgs)">
            <summary>
            The On Tag method is a method that will be called when a Tag is seen by the reader.
            </summary>
            <remarks>his method will envoke all the hooked TagEventHandler methods with the appropriate data.</remarks>
            <param name="e">TagEventArgs object containing the data relating to the Tag being read.</param>
        </member>
        <member name="M:Phidgets.RFID.OnTagLost(Phidgets.Events.TagEventArgs)">
            <summary>
            The On Tag Lost method is a method that will be called when a Tag is removed from the reader.
            </summary>
            <remarks>
            This method will envoke all the hooked TagEventHandler methods with the appropriate data.
            </remarks>
            <param name="e">TagEventArgs object containing the data relating to the Tag being lost.</param>
        </member>
        <member name="M:Phidgets.RFID.OnOutputChange(Phidgets.Events.OutputChangeEventArgs)">
            <summary>
            The On Output Change method is a method that will be called when the state of a digital output changes.
            </summary>
            <remarks>
            This method will envoke all the hooked OutputChangeEventHandler methods with the appropriate data.
            </remarks>
            <param name="e">OutputChangeEventArgs object containing the data relating to the digital output state change.</param>
        </member>
        <member name="M:Phidgets.RFID.DetachEvent(System.Object,Phidgets.Events.DetachEventArgs)">
            <summary>
            The Detach Event.  This event is triggered when a Phidget RFID reader is detached from the computer.
            </summary>
            <remarks>
            Inherited from the Phidget base class.
            </remarks>
            <param name="sender">The object that triggered the event</param>
            <param name="e">A DetachEventArgs object containing data and information related to the detach event.</param>
        </member>
        <member name="M:Phidgets.RFID.AttachEvent(System.Object,Phidgets.Events.AttachEventArgs)">
            <summary>
            The Attach Event.  This event is triggered when a Phidget RFID reader is attached to the computer.
            </summary>
            <remarks>
            Inherited from the Phidget base class.
            </remarks>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">A AttachEventArgs object containing data and information related to the attach event.</param>
        </member>
        <member name="P:Phidgets.RFID.TagPresent">
            <summary>
            Gets a value indicating whether or not a tag is on the reader.
            </summary>
            <remarks>
            If there is a tag currently being read by the reader, this will return true. Otherwise it returns false.
            </remarks>
            <returns>Tag Presence.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.RFID.Antenna">
            <summary>
            Gets or sets the state of the antenna.
            </summary>
            <remarks>
            True turns the antenna on, False turns it off. The antenna if by default turned off, and needs to be explicitely activated before tags can be read. Control over the antenna allows multiple readers to be used in close proximity, as multiple readers will interfere with each other if their antenna's are activated simultaneously.
            </remarks>
            <value>The state of the antenna.</value>
            <returns>The state of the antenna.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.RFID.LED">
            <summary>
            Gets or sets the state of the onboard LED.
            </summary>
            <remarks>
            True turns the LED on, False turns it off. The LED is by default turned off.
            </remarks>
            <value>The state of the LED.</value>
            <returns>The state of the LED.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="E:Phidgets.RFID.Tag">
            <summary>
            The Tag Gained Event Handler delegate.
            </summary>
            <remarks>
            <para>Will hook to user implemented TagEventHandler methods that will be called when the event is triggered.</para>
            <para>The tag gaiend handler is a method that will be called when a new tag is seen by the reader. The event is only fired one time for a new tag, so the tag has to be removed and then replaced before another tag gained event will fire.</para>
            <para>There is no limit on the number of tag gained change handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.RFID.TagLost">
            <summary>
            The Tag Lost Event Handler delegate.
            </summary>
            <remarks>
            <para>Will hook to user implemented TagEventHandler methods that will be called when the event is triggered.</para>
            <para>The tag lost handler is a method that will be called when a tag is removed from the reader.</para>
            <para>There is no limit on the number of tag lost change handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.RFID.OutputChange">
            <summary>
            The digital output state Change Event Handler delegate.
            </summary>
            <remarks>
            <para>Will hook to user implemented OutputChangeEventHandler methods that will be called when the event is triggered.</para>
            <para>The output change handler is a method that will be called when an output has changed.</para>
            <para>There is no limit on the number of output change handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="T:Phidgets.Stepper">
            <summary>
            Stepper class
            </summary>
            <remarks>
            This device is not yet released and as such this class and it's methods are not complete.
            </remarks>
        </member>
        <member name="F:Phidgets.Stepper.steppers">
            <summary>
            TBA - Not yet implemented
            </summary>
        </member>
        <member name="F:Phidgets.Stepper.inputs">
            <summary>
            TBA - Not yet implemented
            </summary>
        </member>
        <member name="M:Phidgets.Stepper.#ctor">
            <summary>
            TBA - Not yet implemented
            </summary>
        </member>
        <member name="M:Phidgets.Stepper.Finalize">
            <summary>
            TBA - Not yet implemented
            </summary>
        </member>
        <member name="E:Phidgets.Stepper.InputChange">
            <summary>
            TBA - Not yet implemented
            </summary>
        </member>
        <member name="E:Phidgets.Stepper.PositionChange">
            <summary>
            TBA - Not yet implemented
            </summary>
            <remarks>
            TBA - Not yet implemented
            </remarks>
        </member>
        <member name="E:Phidgets.Stepper.CurrentChange">
            <summary>
            TBA - Not yet implemented
            </summary>
            <remarks>
            TBA - Not yet implemented
            </remarks>
        </member>
        <member name="E:Phidgets.Stepper.VelocityChange">
            <summary>
            TBA - Not yet implemented
            </summary>
            <remarks>
            TBA - Not yet implemented
            </remarks>
        </member>
        <member name="T:Phidgets.Events.AttachEventArgs">
            <summary>
            Attach event data and information will be stored in this class.
            </summary>
            <remarks>
            The data stored in this event args class is a reference to the Phidget object that triggered the event.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.AttachEventArgs.Device">
            <summary>
            Reference to the Phidget object from which this event originated
            </summary>
        </member>
        <member name="M:Phidgets.Events.AttachEventArgs.#ctor(Phidgets.Phidget)">
            <summary>
            Class constructor. This is called internally by the phidget library when creating this event arg.
            </summary>
            <param name="phidget">The Phidget object from which this event originated</param>
        </member>
        <member name="T:Phidgets.Events.DetachEventArgs">
            <summary>
            Detach event data and information will be stored in this class.
            </summary>
            <remarks>
            The data stored in this event args class is a reference to the Phidget object that triggered the event.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.DetachEventArgs.Device">
            <summary>
            Reference to the Phidget object from which this event originated
            </summary>
        </member>
        <member name="M:Phidgets.Events.DetachEventArgs.#ctor(Phidgets.Phidget)">
            <summary>
            Class constructor. This is called internally by the phidget library when creating this event arg.
            </summary>
            <param name="phidget">The Phidget object from which this event originated</param>
        </member>
        <member name="T:Phidgets.Events.ErrorEventArgs">
            <summary>
            Error event data and information will be stored in this class.
            </summary>
            <remarks>
            The data stored in this event args class is the error description and the error code.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.ErrorEventArgs.Description">
            <summary>
            The reference to the error description string generated by the event.
            </summary>
        </member>
        <member name="F:Phidgets.Events.ErrorEventArgs.Code">
            <summary>
            The reference to the error code value generated by the event.
            </summary>
        </member>
        <member name="M:Phidgets.Events.ErrorEventArgs.#ctor(System.String,System.Int64)">
            <summary>
            Class constructor. This is called internally by the phidget library when creating this event arg.
            </summary>
            <param name="description">The error description string generated by the event.</param>
            <param name="ECode">The error code value generated by the event.</param>
        </member>
        <member name="T:Phidgets.Events.SensorChangeEventArgs">
            <summary>
            Analog Sensor Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class are the index of the analog sensor input that is changing and the sensor value read.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.SensorChangeEventArgs.Index">
            <summary>
            The reference to the analog sensor input index from which this event originated.
            </summary>
        </member>
        <member name="F:Phidgets.Events.SensorChangeEventArgs.Value">
            <summary>
            The reference to the value of the sensor.
            </summary>
            <remarks>This value can range from 0-1000.</remarks>
        </member>
        <member name="M:Phidgets.Events.SensorChangeEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Class constructor. This is called internally by the phidget library when creating this event arg.
            </summary>
            <param name="Index">The index of the sensor.</param>
            <param name="Value">The value of the sensor.  This value can range from 0-1000.</param>
        </member>
        <member name="T:Phidgets.Events.InputChangeEventArgs">
            <summary>
            Input Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class are the index of the digital input that is changing and the state value read.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.InputChangeEventArgs.Index">
            <summary>
            The reference to the digital input index from which this event originated.
            </summary>
        </member>
        <member name="F:Phidgets.Events.InputChangeEventArgs.Value">
            <summary>
            The reference to the bool state value that was read to generate the event.
            </summary>
            <remarks>True indicates that it is activated, False indicated the default state.</remarks>
        </member>
        <member name="M:Phidgets.Events.InputChangeEventArgs.#ctor(System.Int32,System.Boolean)">
            <summary>
            Class constructor. This is called internally by the phidget library when creating this event arg.
            </summary>
            <param name="Index">The digital input index from which this event originated.</param>
            <param name="Value">The state value that was read to generate the event.</param>
        </member>
        <member name="T:Phidgets.Events.OutputChangeEventArgs">
            <summary>
            Output Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class are the index of the digital output that is changing and the state value read.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.OutputChangeEventArgs.Index">
            <summary>
            The reference to the index of the output.
            </summary>
        </member>
        <member name="F:Phidgets.Events.OutputChangeEventArgs.Value">
            <summary>
            The reference to the state of the output.
            </summary>
            <remarks>True indicated that the output is active, False indicated the default inactive state.</remarks>
        </member>
        <member name="M:Phidgets.Events.OutputChangeEventArgs.#ctor(System.Int32,System.Boolean)">
            <summary>
            Class constructor. This is called internally by the phidget library when creating this event arg.
            </summary>
            <param name="Index">The index of the output.</param>
            <param name="Value">The state of the output.  True indicated that the output is active, False indicated the default inactive state.</param>
        </member>
        <member name="T:Phidgets.Events.EncoderPositionChangeEventArgs">
            <summary>
            Encoder Position Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class are the index of the encoder that is changing, the position change value read, and the elapsed time between position changes.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.EncoderPositionChangeEventArgs.Index">
            <summary>
            The reference to the encoder index from which this event originated.
            </summary>
        </member>
        <member name="F:Phidgets.Events.EncoderPositionChangeEventArgs.PositionChange">
            <summary>
            The reference to the position change value that was read to generate the event.
            </summary>
            <remarks>This is the ammount of change in the encoder's position since the last EncoderPositionChangeEvent.</remarks>
        </member>
        <member name="F:Phidgets.Events.EncoderPositionChangeEventArgs.Time">
            <summary>
            The reference to the elapsed time between change events.
            </summary>
            <remarks>This is the time since the last EncoderPositionChangeEvent. This time is not represented in a real quantitly such as seconds, but can be used as a qualitative quantity.</remarks>
        </member>
        <member name="M:Phidgets.Events.EncoderPositionChangeEventArgs.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Class constructor. This is called internally by the phidget library when creating this event arg.
            </summary>
            <param name="Index">The encoder index from which this event originated.</param>
            <param name="Time">The elapsed time from the last position change.</param>
            <param name="PositionChange">The position change value that was read to generate the event.</param>
        </member>
        <member name="T:Phidgets.Events.AccelerationChangeEventArgs">
            <summary>
            Acceleration Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class are the index of the axis that is changing and the acceleration value read.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.AccelerationChangeEventArgs.Index">
            <summary>
            The reference to the axis index from which this event originated.
            </summary>
        </member>
        <member name="F:Phidgets.Events.AccelerationChangeEventArgs.Acceleration">
            <summary>
            The reference to the acceleration value that was read to generate the event.
            </summary>
        </member>
        <member name="M:Phidgets.Events.AccelerationChangeEventArgs.#ctor(System.Int32,System.Double)">
            <summary>
            Class constructor. This is called internally by the phidget library when creating this event arg.
            </summary>
            <param name="Index">The axis index from which this event originated.</param>
            <param name="Acceleration">The acceleration value that was read to generate the event.</param>
        </member>
        <member name="T:Phidgets.Events.VelocityChangeEventArgs">
            <summary>
            Velocity Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class are the index of the motor whose velocity is changing and the velocity value read.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.VelocityChangeEventArgs.Index">
            <summary>
            The reference to the index of the motor.
            </summary>
        </member>
        <member name="F:Phidgets.Events.VelocityChangeEventArgs.Velocity">
            <summary>
            The reference to the velocity of the motor.
            </summary>
            <remarks>This is reported back from the motor controller as the motor changes speed.</remarks>
        </member>
        <member name="M:Phidgets.Events.VelocityChangeEventArgs.#ctor(System.Int32,System.Double)">
            <summary>
            Class constructor. This is called internally by the phidget library when creating this event.
            </summary>
            <param name="Index">The index of the motor.</param>
            <param name="Velocity">The velocity of the motor.  This is reported back from the motor controller as the motor changes speed.</param>
        </member>
        <member name="T:Phidgets.Events.CurrentChangeEventArgs">
            <summary>
            Current Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class are the index of the motor whose current draw is changing and the current value read.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.CurrentChangeEventArgs.Index">
            <summary>
            The reference to the index of the motor.
            </summary>
        </member>
        <member name="F:Phidgets.Events.CurrentChangeEventArgs.Current">
            <summary>
            The reference the current of the motor.
            </summary>
            <remarks>This is a representation of the ammount of current being used by the motor.</remarks>
        </member>
        <member name="M:Phidgets.Events.CurrentChangeEventArgs.#ctor(System.Int32,System.Double)">
            <summary>
            Class constructor. This is called internally by the phidget library when creating this event.
            </summary>
            <param name="Index">The index of the motor.</param>
            <param name="Current">The motor's current draw.</param>
        </member>
        <member name="T:Phidgets.Events.PositionChangeEventArgs">
            <summary>
            Servo Position Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class are the index of the motor whose position is changing and the position value read.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.PositionChangeEventArgs.Index">
            <summary>
            The reference to the index of the motor.
            </summary>
        </member>
        <member name="F:Phidgets.Events.PositionChangeEventArgs.Position">
            <summary>
            The reference to the position of the servo motor.
            </summary>
            <remarks>
            This is esentially just the last position that the servo was set to, echoed back from the controller board.
            </remarks>
        </member>
        <member name="M:Phidgets.Events.PositionChangeEventArgs.#ctor(System.Int32,System.Double)">
            <summary>
            Class constructor. This is called internally by the phidget library when creating this event.
            </summary>
            <param name="Index">The index of the motor.</param>
            <param name="Position">The position of the servo motor.</param>
        </member>
        <member name="T:Phidgets.Events.StepperPositionChangeEventArgs">
            <summary>
            Stepper Position Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class are the index of the stepper motor whose position is changing and the position value read.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.StepperPositionChangeEventArgs.Index">
            <summary>
            The reference to the index of the stepper motor.
            </summary>
        </member>
        <member name="F:Phidgets.Events.StepperPositionChangeEventArgs.Position">
            <summary>
            The reference to the position of the stepper motor.
            </summary>
        </member>
        <member name="M:Phidgets.Events.StepperPositionChangeEventArgs.#ctor(System.Int32,System.Int64)">
            <summary>
            Class constructor. This is called internally by the phidget library when creating this event.
            </summary>
            <param name="Index">The index of the stepper motor.</param>
            <param name="Position">The position of the stepper motor.</param>
        </member>
        <member name="T:Phidgets.Events.PHChangeEventArgs">
            <summary>
            PH Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class is the PH value read.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.PHChangeEventArgs.PH">
            <summary>
            The reference pH value.
            </summary>
            <remarks>
            This value can range from 0-14.
            </remarks>
        </member>
        <member name="M:Phidgets.Events.PHChangeEventArgs.#ctor(System.Double)">
            <summary>
            Class constructor. This is called internally by the phidget library when creating this event.
            </summary>
            <param name="PH">The pH value.</param>
        </member>
        <member name="T:Phidgets.Events.TagEventArgs">
            <summary>
            Tag Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class is the Tag data that is read.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.TagEventArgs.Tag">
            <summary>
            The reference to the gained or lost tag.
            </summary>
            <remarks>
            The tag is a 10 digit hex number represented as a string.
            </remarks>
        </member>
        <member name="M:Phidgets.Events.TagEventArgs.#ctor(System.String)">
            <summary>
            Class constructor. This is called internally by the phidget library when creating this event arg.
            </summary>
            <param name="Tag">the gained or lost tag.  The tag is a 10 digit hex number represented as a string.</param>
        </member>
        <member name="T:Phidgets.Events.TemperatureChangeEventArgs">
            <summary>
            Temperature Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class is the index of the temperature sensor and the temperature data.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.TemperatureChangeEventArgs.Index">
            <summary>
            The reference to the index of the sensor.
            </summary>
            <remarks>
            0 is the IC/Ambient sensor, 1 is the thermocouple.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.TemperatureChangeEventArgs.Temperature">
            <summary>
            The reference to the temperature of the sensor.
            </summary>
            <remarks>
            The temperature of the sensor is degrees celcius.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.TemperatureChangeEventArgs.Potential">
            <summary>
            The reference to the potential of the sensor.
            </summary>
            <remarks>
            The potential of the sensor is in millivolts. This is only valid for the thermocouple inputs.
            </remarks>
        </member>
        <member name="M:Phidgets.Events.TemperatureChangeEventArgs.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Class constructor. This is called internally by the phidget library when creating this event arg.
            </summary>
            <param name="Index">The index of the sensor.</param>
            <param name="Temperature">The temperature of the sensor in degrees celcius.</param>
        </member>
        <member name="T:Phidgets.Events.WeightChangeEventArgs">
            <summary>
            Weight Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class is the weight data read by the sensor.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.WeightChangeEventArgs.Weight">
            <summary>
            The reference to the weight read by the sensor.
            </summary>
            <remarks>
            The weight read by the sensor is read in kg.
            </remarks>
        </member>
        <member name="M:Phidgets.Events.WeightChangeEventArgs.#ctor(System.Double)">
            <summary>
            Class constructor. This is called internally by the phidget library when creating this event arg.
            </summary>
            <param name="Weight">The sensed weight in kg.</param>
        </member>
        <member name="T:Phidgets.Events.KeyEventArgs">
            <summary>
            Key Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class is the value data and the key.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.KeyEventArgs.value">
            <summary>
            The value data
            </summary>
        </member>
        <member name="F:Phidgets.Events.KeyEventArgs.key">
            <summary>
            The Key
            </summary>
        </member>
        <member name="M:Phidgets.Events.KeyEventArgs.#ctor(System.String,System.String)">
            <summary>
            Class constructor. This is called internally by the phidget library when creating this event arg.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The Value.</param>
        </member>
        <member name="T:Phidgets.Events.AttachEventHandler">
            <summary>
            The Attach Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An AttachEventArgs object containing data and information related to the attach event.</param>
        </member>
        <member name="T:Phidgets.Events.DetachEventHandler">
            <summary>
            The Detach Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An DetachEventArgs object containing data and information related to the detach event.</param>
        </member>
        <member name="T:Phidgets.Events.ErrorEventHandler">
            <summary>
            The Error Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An ErrorEventArgs object containing data and information related to the error event.</param>
        </member>
        <member name="T:Phidgets.Events.SensorChangeEventHandler">
            <summary>
            The Sensor Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An SensorChangeEventArgs object containing data and information related to the sensor change event.</param>
        </member>
        <member name="T:Phidgets.Events.InputChangeEventHandler">
            <summary>
            The Input Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An InputChangeEventArgs object containing data and information related to the input change event.</param>
        </member>
        <member name="T:Phidgets.Events.OutputChangeEventHandler">
            <summary>
            The Output Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An OutputChangeEventArgs object containing data and information related to the output change event.</param>
        </member>
        <member name="T:Phidgets.Events.EncoderPositionChangeEventHandler">
            <summary>
            The Encoder Position Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An EncoderPositionChangeEventArgs object containing data and information related to the encoder position change event.</param>
        </member>
        <member name="T:Phidgets.Events.AccelerationChangeEventHandler">
            <summary>
            The Acceleration Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An AccelerationChangeEventArgs object containing data and information related to the acceleration change event.</param>
        </member>
        <member name="T:Phidgets.Events.PositionChangeEventHandler">
            <summary>
            The Position Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An PositionChangeEventArgs object containing data and information related to the position change event.</param>
        </member>
        <member name="T:Phidgets.Events.StepperPositionChangeEventHandler">
            <summary>
            The Stepper Position Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An StepperPositionChangeEventArgs object containing data and information related to the stepper position change event.</param>
        </member>
        <member name="T:Phidgets.Events.VelocityChangeEventHandler">
            <summary>
            The Velocity Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An VelocityChangeEventArgs object containing data and information related to the velocity change event.</param>
        </member>
        <member name="T:Phidgets.Events.CurrentChangeEventHandler">
            <summary>
            The Current Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An CurrentChangeEventArgs object containing data and information related to the current change event.</param>
        </member>
        <member name="T:Phidgets.Events.PHChangeEventHandler">
            <summary>
            The PH Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">A PHChangeEventArgs object containing data and information related to the PH change event.</param>
        </member>
        <member name="T:Phidgets.Events.TagEventHandler">
            <summary>
            The Tag Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">A TagEventArgs object containing data and information related to the tag event.</param>
        </member>
        <member name="T:Phidgets.Events.TemperatureChangeEventHandler">
            <summary>
            The Temperature Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">A TemperatureChangeEventArgs object containing data and information related to the temperature change event.</param>
        </member>
        <member name="T:Phidgets.Events.WeightChangeEventHandler">
            <summary>
            The Weight Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">A WeightChangeEventArgs object containing data and information related to the weight change event.</param>
        </member>
        <member name="T:Phidgets.Events.KeyEventHandler">
            <summary>
            The Key Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">A KeyEventArgs object containing data and information related to the key event.</param>
        </member>
        <member name="T:Phidgets.TemperatureSensor">
            <summary>
            This class represents a Phidget temperature Sensor. All methods to read temperaure data from the sensor are implemented in this class.
            </summary>
            <remarks>
            <para>The Temperature Phidget consists of a thermocouple interface, and a temperature sensing IC, which is used to measure the temperature of the thermocouple cold junction and calibrate the thermocouple sensed temperature.</para>
            <para>Both the thermocouple and temperature IC (ambient sensor) temperatures can be read. Values are returned in degrees celcius.</para>
            </remarks>
        </member>
        <member name="F:Phidgets.TemperatureSensor.ambientSensor">
            <summary>
            The Phidget TemperatureSensor ambient sensor.
            </summary>
            <remarks>
            This is the board ambient temperature sensor.
            </remarks>
        </member>
        <member name="F:Phidgets.TemperatureSensor.thermocouples">
            <summary>
            The collection of available thermocouples.
            </summary>
            <remarks>
            Currently, the TemperatureSensor only provides support for one Thermocouple.
            </remarks>
        </member>
        <member name="M:Phidgets.TemperatureSensor.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>
            Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.
            </remarks>
        </member>
        <member name="M:Phidgets.TemperatureSensor.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>
            Will attempt to close the phidget if it has yet to be closed.
            </remarks>
        </member>
        <member name="M:Phidgets.TemperatureSensor.OnTemperatureChange(Phidgets.Events.TemperatureChangeEventArgs)">
            <summary>
            The On Temperature Change method is a method that will be called when the temperature changes.
            </summary>
            <remarks>
            This method will envoke all the hooked TemperatureChangeEventHandler methods with the appropriate data.
            </remarks>
            <param name="e">TemperatureChangeEventArgs object containing the data relating to the temperature change.</param>
        </member>
        <member name="M:Phidgets.TemperatureSensor.DetachEvent(System.Object,Phidgets.Events.DetachEventArgs)">
            <summary>
            The Detach Event.  This event is triggered when a Phidget TemperatureSensor is detached from the computer.
            </summary>
            <remarks>
            Inherited from the Phidget base class.
            </remarks>
            <param name="sender">The object that triggered the event</param>
            <param name="e">A DetachEventArgs object containing data and information related to the detach event.</param>
        </member>
        <member name="M:Phidgets.TemperatureSensor.AttachEvent(System.Object,Phidgets.Events.AttachEventArgs)">
            <summary>
            The Attach Event.  This event is triggered when a Phidget TemperatureSensor is attached to the computer.
            </summary>
            <remarks>
            Inherited from the Phidget base class.
            </remarks>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An AttachEventArgs object containing data and information related to the attach event.</param>
        </member>
        <member name="E:Phidgets.TemperatureSensor.TemperatureChange">
            <summary>
            The Temperature Change Event Handler delegate.
            </summary>
            <remarks>
            <para>Will hook to user implemented TemperatureChangeEventHandler methods that will be called when the event is triggered.</para>
            <para>The temperature change handler is a method that will be called when the temperature has changed by at least the Sensitivity trigger value that has been set.</para>
            <para>There is no limit on the number of weight change handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="T:Phidgets.Encoder">
            <summary>
            This class represents a Phidget Encoder. All methods to read encoder data from an encoder are implemented in this class.
            </summary>
            <remarks>
            Phidget Encoder boards generally support 1 or more encoders with 0 or more digital inputs. Both high speed optical and low speed mechanical encoders are supported with this API.
            </remarks>
        </member>
        <member name="F:Phidgets.Encoder.encoders">
            <summary>
            The collection of available encoders.
            </summary>
            <remarks>
            Phidget Encoder boards generally support 1 or more encoders.
            </remarks>
        </member>
        <member name="F:Phidgets.Encoder.inputs">
            <summary>
            The collecton of available digital inputs.
            </summary>
            <remarks>
            Phidget Encoder boards generally support 0 or more digital inputs.
            </remarks>
        </member>
        <member name="M:Phidgets.Encoder.#ctor">
            <summary>
            The constructor for the Encoder class.
            </summary>
        </member>
        <member name="M:Phidgets.Encoder.Finalize">
            <summary>
            The destructor/finalizer for the Encoder class.
            </summary>
            <remarks>
            Will attempt to close the phidget if it has yet to be closed.
            </remarks>
        </member>
        <member name="M:Phidgets.Encoder.OnPositionChange(Phidgets.Events.EncoderPositionChangeEventArgs)">
            <summary>
            The On Position Change method is a method that will be called when the position of an encoder changes.
            </summary>
            <remarks>This method will envoke all the hooked EncoderPositionChangeEventHandler methods with the appropriate data.</remarks>
            <param name="e">EncoderPositionChangeEventArgs object containing the data relating to the encoder position change.</param>
        </member>
        <member name="M:Phidgets.Encoder.OnInputChange(Phidgets.Events.InputChangeEventArgs)">
            <summary>
            The On Input Change method is a method that will be called when the state of a digital input changes.
            </summary>
            <remarks>This method will envoke all the hooked InputChangeEventHandler methods with the appropriate data.</remarks>
            <param name="e">InputChangeEventArgs object containing the data relating to the digital input state change.</param>
        </member>
        <member name="M:Phidgets.Encoder.DetachEvent(System.Object,Phidgets.Events.DetachEventArgs)">
            <summary>
            The Detach Event.  This event is triggered when a Phidget Encoder is detached from the computer.
            </summary>
            <remarks>Inherited from the Phidget base class</remarks>
            <param name="sender">The object that triggered the event</param>
            <param name="e">A DetachEventArgs object containing data and information related to the detach event.</param>
        </member>
        <member name="M:Phidgets.Encoder.AttachEvent(System.Object,Phidgets.Events.AttachEventArgs)">
            <summary>
            The Attach Event.  This event is triggered when a Phidget Encoder is attached to the computer.
            </summary>
            <remarks>Inherited from the Phidget base class</remarks>
            <param name="sender">The object that triggered the event</param>
            <param name="e">A AttachEventArgs object containing data and information related to the attach event.</param>
        </member>
        <member name="E:Phidgets.Encoder.PositionChange">
            <summary>
            The encoder Position Change event handler delegate.
            </summary>
            <remarks>
            <para>Will hook to user implemented EncoderPositionChangeEventHandler methods that will be called when the event is triggered.</para>
            <para>The position change event provides data about how many ticks have occured, and how much time has passed since the last position change event, but does not contain an absolute position. This can be obtained from getEncoderPosition.</para>
            <para>There is no limit on the number of position change handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.Encoder.InputChange">
            <summary>
            The digital input state Change Event Handler delegate.
            </summary>
            <remarks>
            <para>Will hook to user implemented InputChangeEventHandler methods that will be called when the event is triggered.</para>
            <para>The input change handler is a method that will be called when an input on this Encoder board has changed.</para>
            <para>There is no limit on the number of input change handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="T:Phidgets.TextLCDCustomCharacter">
            <summary>
            This class represents a custom character that is defined for the TextLCD.
            </summary>
            <remarks>
            Custom characters can be inserted anywhere into the display string.
            </remarks>
        </member>
        <member name="M:Phidgets.TextLCDCustomCharacter.setCustomCharacter(System.Int32,System.Int32)">
            <summary>
            Set this custom character.
            </summary>
            <remarks>
            <para>The custom character is defined by two integers.</para>
            <para>The two Integers define the character. Each character is 8x5, the first integer defines the top 4x5 and the second the bottom 4x5.</para>
            <para>Each 4x5 half-character is defined by 5 hex bytes:</para>
            <para>ie:
            <div>
            <table>
            <tr><th>0x54321 = </th></tr>
            <tr><td>21111</td></tr>
            <tr><td>33222</td></tr>
            <tr><td>44433</td></tr>
            <tr><td>55554</td></tr>
            </table>
            </div>
            </para>
            <para>
            <div>
            <table>
            <tr><th>0x11111 = </th></tr>
            <tr><td>10001</td></tr>
            <tr><td>01000</td></tr>
            <tr><td>00100</td></tr>
            <tr><td>00010</td></tr>
            </table>
            </div>
            </para>
            <para>There is a generator utility that will generate the integers for you here: http://207.158.15.140/documentation/customchar.html </para>
            </remarks>
            <param name="value1">First value given by the customchar utility</param>
            <param name="value2">Second value given by the customchar utility</param>
        </member>
        <member name="P:Phidgets.TextLCDCustomCharacter.StringCode">
            <summary>
            The character code associated with this character. 
            </summary>
            <remarks>
            Insert this into strings sent to the display where you would like this character to appear.
            </remarks>
            <value>The Stringcode at the specified index</value>
            <returns>The Stringcode at the specified index</returns>
        </member>
        <member name="T:Phidgets.TextLCDCustomCharacterCollection">
            <summary>
            The collection of custom characters that can be defined for the display.
            </summary>
            <remarks>
             The display handles 8 custom characters. These must be defined before
            they can be used. They will stay in the TextLCD memory until power is removed.
            </remarks>
        </member>
        <member name="P:Phidgets.TextLCDCustomCharacterCollection.Item(System.Int32)">
            <summary>
            The custom character object.
            </summary>
            <param name="index">Index of the custom character in the collection</param>
            <returns>The custom character stored at the index in the collection</returns>
        </member>
        <member name="T:Phidgets.TextLCDRow">
            <summary>
            This class represents a row of text display on the screen of the TextLCD.
            </summary>
            <remarks>
            a TextLCDRow object stores the text that will be displayed at the row specified by the provided index.  Currently, TextLCDs only support 2 rows of text display.
            </remarks>
        </member>
        <member name="F:Phidgets.TextLCDRow.phid">
            <summary>
            The pointer for the referenced phidget that this object belongs to.
            </summary>
        </member>
        <member name="F:Phidgets.TextLCDRow.index">
            <summary>
            The index of the text row that this object represents.
            </summary>
            <remarks>
            Currently there is a maximum of two - 0 or 1.
            </remarks>
        </member>
        <member name="M:Phidgets.TextLCDRow.#ctor(Phidgets.TextLCD,System.Int32)">
            <summary>
            The TextLCDRow constructor
            </summary>
            <param name="phid">Reference to the TextLCD object for which this Row belongs to.</param>
            <param name="index">The index of this row on the screen.  Currently there is a maximum of two - 0 or 1.</param>
        </member>
        <member name="P:Phidgets.TextLCDRow.DisplayString">
            <summary>
            Sets the display string of this row.
            </summary>
            <remarks>
            If the string is longer then the row, it will be truncated.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the row is invalid.</exception>
        </member>
        <member name="P:Phidgets.TextLCDRow.MaximumLength">
            <summary>
            Gets the maximum length of this row.
            </summary>
            <remarks>
            Returns the number of columns (characters per row) available on the display. This value is the same for every row.
            </remarks>
            <value>Number of columns (characters) allowed in this row.</value>
            <returns>Number of columns (characters) allowed in this row.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.TextLCDRowCollection">
            <summary>
            This class represents the collection of the available rows on the TextLCD screen.
            </summary>
            <remarks>
            This class contains the count of the total number of rows on the TextLCD screen and the indexer for accessing these display rows.
            </remarks>
        </member>
        <member name="F:Phidgets.TextLCDRowCollection.phid">
            <summary>
            The pointer for the referenced phidget that this object belongs to.
            </summary>
        </member>
        <member name="F:Phidgets.TextLCDRowCollection.numRows">
            <summary>
            The count of the total number of text display rows on the TextLCD.
            </summary>
            <remarks>
            Currently, TextLCDs only support two ows of display.
            </remarks>
        </member>
        <member name="M:Phidgets.TextLCDRowCollection.#ctor(Phidgets.TextLCD)">
            <summary>
            The Collection constructor.
            </summary>
            <remarks>
            Initializes the collection and counts the number of available rows.
            </remarks>
            <param name="phid">Reference to the TextLCD object that this collection belongs to.</param>
            <exception cref="T:Phidgets.PhidgetException">If there was a problem connecting to phidget21 or creating the internal handle. Also, if this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TextLCDRowCollection.Item(System.Int32)">
            <summary>
            The TextLCD row indexer list. This gets a reference to the TextLCDRow object stored at the supplied index locaiton in the collection list.
            </summary>
            <param name="index">The TextLCD row index.</param>
            <value>A reference to the TextLCD row object stored at the supplied index location in the collection list.</value>
            <returns>A reference to the TextLCD row object stored at the supplied index location in the collection list.</returns>
        </member>
        <member name="T:Phidgets.WeightSensorSensor">
            <summary>
            This class represents a Phidget Weight Sensor. All methods to read weight data from the weight sensor are implemented in this class.
            </summary>
            <remarks>
            The Phidget Weight Sensor is simply an electronic scale with a USB interface. It provides one weight value, in kg.
            </remarks>
        </member>
        <member name="F:Phidgets.WeightSensorSensor.phid">
            <summary>
            The pointer for the referenced phidget that this sensor object relates to.
            </summary>
        </member>
        <member name="M:Phidgets.WeightSensorSensor.#ctor(Phidgets.WeightSensor)">
            <summary>
            The weight sensor constructor.
            </summary>
            <param name="phid">Reference to the WeightSensor object for which this weight sensor belongs.</param>
        </member>
        <member name="P:Phidgets.WeightSensorSensor.Weight">
            <summary>
            Gets the sensed weight in kg.
            </summary>
            <remarks>
            This weight is in kg (kilograms), but can easily be converted into other units.  The accuracy, sesitivity and range depends on the scale and version.
            </remarks>
            <value>The sensed weight in kg.</value>
            <returns>The sensed weight in kg.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.WeightSensorSensor.Sensitivity">
            <summary>
            Gets or sets the weight change trigger.
            </summary>
            <remarks>
            This is the ammount by which the sensed weight must change between WeightChangeEvents. By default this is set to 5.
            </remarks>
            <value>The trigger value.</value>
            <returns>The trigger value.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.PhidgetException">
            <summary>
            This class represents Phidget related exceptions.
            </summary>
            <remarks>
            All Phidget exceptions originate in the phidget21 C library. These exceptions can be thrown by most function in the library and cover such things as trying to access a Phidget before opening it, or before it is attached and ready to use, out of bounds Index and data values, and other less common problems.
            </remarks>
        </member>
        <member name="M:Phidgets.PhidgetException.#ctor(System.String,System.Int32)">
            <summary>
            Constructor which takes is an error number and description.
            </summary>
            <remarks>
            These exceptions originate from and are filled in by the phidget 21 C library.
            </remarks>
            <param name="message">description</param>
            <param name="code">error number</param>
        </member>
        <member name="P:Phidgets.PhidgetException.Code">
            <summary>
            Gets the error number of this exception. This error number defines the type of Phidget error.
            </summary>
            <remarks>
            <para>These codes are defined in the base phidget21 C library as follows:</para>
            <list type="table">
            <listheader>
                <term>Alias</term>
                <description>Code</description>
            </listheader>
            <item>
                <term>EPHIDGET_OK</term>
                <description>0</description>
            </item>
            <item>
                <term>EPHIDGET_NOTFOUND</term>
                <description>1</description>
            </item>
            <item>
                <term>EPHIDGET_NOMEMORY</term>
                <description>2</description>
            </item>
            <item>
                <term>EPHIDGET_UNEXPECTED</term>
                <description>3</description>
            </item>
            <item>
                <term>EPHIDGET_INVALIDARG</term>
                <description>4</description>
            </item>
            <item>
                <term>EPHIDGET_NOTATTACHED</term>
                <description>5</description>
            </item>
            <item>
                <term>EPHIDGET_INTERRUPTED</term>
                <description>6</description>
            </item>
            <item>
                <term>EPHIDGET_INVALIDERROR</term>
                <description>7</description>
            </item>
            <item>
                <term>EPHIDGET_NETWORKERROR</term>
                <description>8</description>
            </item>
            <item>
                <term>EPHIDGET_UNKNOWNVAL</term>
                <description>9</description>
            </item>
            <item>
                <term>EPHIDGET_BADPASSWORD</term>
                <description>10</description>
            </item>
            <item>
                <term>EPHIDGET_UNSUPPORTEDERROR</term>
                <description>11</description>
            </item>
            <item>
                <term>EPHIDGET_DUPLICATE</term>
                <description>12</description>
            </item>
            <item>
                <term>EPHIDGET_TIMEOUT</term>
                <description>13</description>
            </item>
            </list>
            </remarks>
            <value>The error code</value>
            <returns>The error code</returns>
        </member>
        <member name="P:Phidgets.PhidgetException.Description">
            <summary>
            Gets a description of this exception.
            </summary>
            <remarks>
            This is an english phrase that describes the exception that occured. These string originate in the base phidget21 C library, and should help to diagnose problems.
            </remarks>
            <value>The error description</value>
            <returns>The error description</returns>
        </member>
        <member name="T:Phidgets.PHSensor">
            <summary>
            This class represents a Phidget PH Sensor. All methods to read PH data from the PH Sensor are implemented in this class.
            </summary>
            <remarks>
            The Phidget PH Sensor provides one standard PH sensor input.
            </remarks>
        </member>
        <member name="F:Phidgets.PHSensor.sensor">
            <summary>
            The Phidget PHSensor PH sensor.
            </summary>
        </member>
        <member name="M:Phidgets.PHSensor.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>
            Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.
            </remarks>
        </member>
        <member name="M:Phidgets.PHSensor.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>
            Will attempt to close the phidget if it has yet to be closed.
            </remarks>
        </member>
        <member name="M:Phidgets.PHSensor.OnPHChange(Phidgets.Events.PHChangeEventArgs)">
            <summary>
            The On PH Change method is a method that will be called when the PH value changes.
            </summary>
            <remarks>
            This method will envoke all the hooked PHChangeEventHandler methods with the appropriate data.
            </remarks>
            <param name="e">PHChangeEventArgs object containing the data relating to the PH value change.</param>
        </member>
        <member name="M:Phidgets.PHSensor.DetachEvent(System.Object,Phidgets.Events.DetachEventArgs)">
            <summary>
            The Detach Event.  This event is triggered when a Phidget PHSensor is detached from the computer.
            </summary>
            <remarks>
            Inherited from the Phidget base class.
            </remarks>
            <param name="sender">The object that triggered the event</param>
            <param name="e">A DetachEventArgs object containing data and information related to the detach event.</param>
        </member>
        <member name="M:Phidgets.PHSensor.AttachEvent(System.Object,Phidgets.Events.AttachEventArgs)">
            <summary>
            The Attach Event.  This event is triggered when a Phidget PHSensor is attached to the computer.
            </summary>
            <remarks>
            Inherited from the Phidget base class.
            </remarks>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An AttachEventArgs object containing data and information related to the attach event.</param>
        </member>
        <member name="E:Phidgets.PHSensor.PHChange">
            <summary>
            Handler for PH Change Events.
            </summary>
            <remarks>
            <para>Will hook to user implemented TemperatureChangeEventHandler methods that will be called when the event is triggered.</para>
            <para>The ph change handler is a method that will be called when the pH has changed by at least the Sensitivity that has been set.</para>
            <para>There is no limit on the number of ph change handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="T:Phidgets.AccelerometerAxis">
            <summary>
            This class represents an axis of acceleration for a Phidget Accelerometer.  All the properties of an Accelerometer axis are stored and modified in this class.
            </summary>
            <remarks>
            A Phidget Accelerometer axis object stores the acceleration data for that axis. The sensitivity of the acceleration readings for the realted axis is implemented in this class.
            </remarks>
        </member>
        <member name="F:Phidgets.AccelerometerAxis.phid">
            <summary>
            Reference to the accelerometer object for which this axis is related.
            </summary>
            <value>
            A pointer to the Accelerometer object.
            </value>
        </member>
        <member name="F:Phidgets.AccelerometerAxis.index">
            <summary>
            Stores the index of this axis.
            </summary>
            <remarks>
            Index 0 is the x-axis, 1 is the y-axis, and 2 is the z-axis (where available).
            </remarks>
            <value>
            Index 0 is the x-axis, 1 is the y-axis, and 2 is the z-axis (where available).
            </value>
        </member>
        <member name="M:Phidgets.AccelerometerAxis.#ctor(Phidgets.Accelerometer,System.Int32)">
            <summary>
            The axis constructor.
            </summary>
            <remarks>
            Sets the phid and index provided for this axis.
            </remarks>
            <param name="phid">Reference to the accelerometer object for which this axis is related.</param>
            <param name="index">Index of the axis. Index 0 is the x-axis, 1 is the y-axis, and 2 is the z-axis (where available).</param>
        </member>
        <member name="P:Phidgets.AccelerometerAxis.Sensitivity">
            <summary>
            The sensitivity property represents the read sensitivity of the acceleration data for this axis.
            </summary>
            <remarks>
            The sensitivity property gets/sets the sensitiviy data member. This is the difference in acceleration that must appear between succesive calls to the OnAccelerationChange event handler.
            </remarks>
            <value>
            The sensitivity property gets/sets the sensitiviy data member.
            </value>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="P:Phidgets.AccelerometerAxis.Acceleration">
            <summary>
            The acceleration property represents the acceleration data for this axis.
            </summary>
            <remarks>
            The acceleration property gets the accelVal data member.
            </remarks>
            <value>
            The acceleration property gets the accelVal data member.
            </value>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="T:Phidgets.AccelerometerAxisCollection">
            <summary>
            This class represents the collection of axes related to a Phidget Accelerometer.  All the methods and properties used to axes the available axes are implemented in this class.
            </summary>
            <remarks>
            This class contains the count of the available axes and the axis indexer to access the axes.
            </remarks>
        </member>
        <member name="F:Phidgets.AccelerometerAxisCollection.phid">
            <summary>
            Reference to the accelerometer object for which this collection of axes is related.
            </summary>
        </member>
        <member name="F:Phidgets.AccelerometerAxisCollection.numAxes">
            <summary>
            The count of the total available axes related to the connected accelerometer referenced by the phid.
            </summary>
        </member>
        <member name="M:Phidgets.AccelerometerAxisCollection.#ctor(Phidgets.Accelerometer)">
            <summary>
            The AccelerometerAxisCollection constructor.
            </summary>
            <remarks>
            Will access the axes on the connected accelerometer referenced by the supplied phid and initialize the indexer list.
            </remarks>
            <param name="phid">Reference to the accelerometer object for which this collection of axes is related.</param>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.AccelerometerAxisCollection.Item(System.Int32)">
            <summary>
            The AccelerometerAxis indexer list.
            </summary>
            <param name="index">The axis index.  Index 0 is the x-axis, 1 is the y-axis, and 2 is the z-axis (where available).</param>
            <returns>The axis object stored at that index that represents the corresponding axis.</returns>
        </member>
        <member name="T:Phidgets.TextLCD">
            <summary>
            This class represents a Phidget Text LCD. All methods to control the Text LCD are implemented in this class.
            </summary>
            <remarks>
            The TextLCD Phidget consists of a Vacuum Fluorescent display that is capable of displaying Standard as well as custom characters in multiple rows.
            </remarks>
        </member>
        <member name="F:Phidgets.TextLCD.rows">
            <summary>
            The collection of available rows of text display on the TextLCD screen.
            </summary>
        </member>
        <member name="F:Phidgets.TextLCD.customCharacters">
            <summary>
            The collection of defined custom characters.
            </summary>
            <remarks>
            A maximum of 8 cutom characters can be defined at a time for the TextLCD.
            </remarks>
        </member>
        <member name="M:Phidgets.TextLCD.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>
            Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.
            </remarks>
        </member>
        <member name="M:Phidgets.TextLCD.Finalize">
            <summary>
            Class destructor/finalizer
            </summary>
            <remarks>
            Will attempt to close the phidget if it has yet to be closed.
            </remarks>
        </member>
        <member name="M:Phidgets.TextLCD.DetachEvent(System.Object,Phidgets.Events.DetachEventArgs)">
            <summary>
            The Detach Event.  This event is triggered when a Phidget TextLCD is detached from the computer.
            </summary>
            <remarks>
            Inherited from the Phidget base class.
            </remarks>
            <param name="sender">The object that triggered the event</param>
            <param name="e">A DetachEventArgs object containing data and information related to the detach event.</param>
        </member>
        <member name="M:Phidgets.TextLCD.AttachEvent(System.Object,Phidgets.Events.AttachEventArgs)">
            <summary>
            The Attach Event.  This event is triggered when a Phidget InterfaceKit is attached to the computer.
            </summary>
            <remarks>
            Inherited from the Phidget base class.
            </remarks>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">A AttachEventArgs object containing data and information related to the attach event.</param>
        </member>
        <member name="P:Phidgets.TextLCD.Backlight">
            <summary>
            Gets or sets the status of the backlight property.
            </summary>
            <remarks>
            True indicated that the backlight is on, False indicated that it is off. The backlight is by default turned on.
            </remarks>
            <value>Status of the backlight property.</value>
            <returns>Status of the backlight property.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TextLCD.Cursor">
            <summary>
            Gets or sets the status of the cursor property.
            </summary>
            <remarks>
            True turns the cursor is on, False turns it off. The cursor is an underscore which appears directly to the right of the last entered character on the display. The cursor is by default disabled.
            </remarks>
            <value>Status of the cursor property.</value>
            <returns>Status of the cursor property.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TextLCD.CursorBlink">
            <summary>
            Gets or sets the status of the cursor blink property.
            </summary>
            <remarks>
            True turns the cursor blink on, False turns it off. The cursor blink is an flashing box which appears directly to the right of the last entered character on the display, in the same spot as the cursor if it is enabled. The cursor blink is by default disabled.
            </remarks>
            <value>Status of the cursor blink property.</value>
            <returns>Status of the cursor blink property.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TextLCD.Contrast">
            <summary>
            Gets or sets the value of the contrast property.
            </summary>
            <remarks>
            This is the contrast of the entire display.  The valid range is 0-255. Changing the contrast can increase the readability of the display in certain viewing situation, such as at an odd angle.
            </remarks>
            <value>Current contrast level.</value>
            <returns>Current contrast level.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or the contrast value is out of range.</exception>
        </member>
        <member name="T:Phidgets.LEDLEDCollection">
            <summary>
            This class represents a collection of LEDs. All the methods and properties used to access the available LEDs are implemented in this class.
            </summary>
            <remarks>This class contains the count of the available LEDs and the LED indexer to access the LEDs and set or get their brightness.</remarks>
        </member>
        <member name="F:Phidgets.LEDLEDCollection.phid">
            <summary>
            The pointer for the referenced phidget that this collection relates to.
            </summary>
        </member>
        <member name="F:Phidgets.LEDLEDCollection.numLEDs">
            <summary>
            he count of total available LEDs related to the connected Phidget LED board pointed to by the phid.
            </summary>
        </member>
        <member name="M:Phidgets.LEDLEDCollection.#ctor(Phidgets.LED)">
            <summary>
            The Collection constructor.
            </summary>
            <remarks>Initializes the collection and counts the number of available LEDs.</remarks>
            <param name="phid">Reference to the LED object that this collection belongs to.</param>
            <exception cref="T:Phidgets.PhidgetException">If there was a problem connecting to phidget21 or creating the internal handle. Also, if this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.LEDLEDCollection.Item(System.Int32)">
            <summary>
            The LED indexer list. This gets or sets the brightness level of an LED at the supplied index in the colleciton list.
            </summary>
            <remarks>Brightness levels range from 0-100.</remarks>
            <param name="index">The LED index.</param>
            <value>The current brightness level of the LED at the supplied index.  Brightness levels range from 0-100.</value>
            <returns>The current brightness level of the LED at the supplied index.  Brightness levels range from 0-100.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index of brightness value are out of range.</exception>
        </member>
        <member name="P:Phidgets.LEDLEDCollection.Count">
            <summary>
            Returns the number of LEDs that this board can drive. This may not correspond to the actual number of LEDs attached.
            </summary>
            <value>The number of available LEDs</value>
            <returns>The number of available LEDs</returns>
        </member>
        <member name="T:Phidgets.TemperatureSensorAmbientSensor">
            <summary>
            This class represents the temperature IC (or Ambient sensor) on a Phidget TemperatureSensor.  All the properties of the temperature IC/Ambient sensor are stored and modified in this class.
            </summary>
            <remarks>
            A Phidget TemperatureSensor IC/Ambient sensor object stores the ambient board temperature. The sesnor's sensitivity can also be modified from this class.  It can be used to measure the temperature of the thermocouple cold junction and calibrate the thermocouple sensed temperature.
            </remarks>
        </member>
        <member name="F:Phidgets.TemperatureSensorAmbientSensor.phid">
            <summary>
            The pointer for the referenced phidget that this input object relates to.
            </summary>
        </member>
        <member name="M:Phidgets.TemperatureSensorAmbientSensor.#ctor(Phidgets.TemperatureSensor)">
            <summary>
            The Ambient sensor constructor.
            </summary>
            <param name="phid">Reference to the TemperatureSensor object for which this ambient sensor belongs.</param>
        </member>
        <member name="P:Phidgets.TemperatureSensorAmbientSensor.Temperature">
            <summary>
            Gets the temperature of the ambient sensor IC.
            </summary>
            <remarks>
            This value is returned in degrees celcius but can easily be converted into other units. The board is calibrated during manufacture.
            </remarks>
            <value>Temperature of the ambient sensor in derees celcius</value>
            <returns>Temperature of the ambient sensor in derees celcius</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TemperatureSensorAmbientSensor.Sensitivity">
            <summary>
            Gets or sets the temperature change trigger sensitivity for the ambient sensor IC.
            </summary>
            <remarks>
            This is the ammount by which the sensed temperature must change between TemperatureChangeEvents. By default this is set to 5.
            </remarks>
            <value>The temperature change trigger sensitivity.</value>
            <returns>The temperature change trigger sensitivity.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.TemperatureSensorSensor">
            <summary>
            This class represents a thermocouple sensor attached to a Phidget TemperatureSensor.  All the properties of the thermocouple sensor are stored and modified in this class.
            </summary>
            <remarks>
            A Phidget TemperatureSensor thermocouple sensor object stores the thermocouple sensor data for that thermocouple sensor. The sensitivity of the temperature readings for the related thermocouple is implemented in this class.
            </remarks>
        </member>
        <member name="F:Phidgets.TemperatureSensorSensor.phid">
            <summary>
            The pointer for the referenced phidget that this input object relates to.
            </summary>
        </member>
        <member name="F:Phidgets.TemperatureSensorSensor.index">
            <summary>
            The index of this thermocouple sensor.
            </summary>
            <remarks>
            Currently, the TemperatureSensor board only supports one thermocouple sensor, so it's index will be 0.
            </remarks>
        </member>
        <member name="M:Phidgets.TemperatureSensorSensor.#ctor(Phidgets.TemperatureSensor,System.Int32)">
            <summary>
            The thermocouple sensor constructor.
            </summary>
            <param name="phid">Reference to the TemperatureSensor object for which this thermocouple sensor belongs.</param>
            <param name="index">The index of this thermocouple sensor.</param>
        </member>
        <member name="P:Phidgets.TemperatureSensorSensor.Temperature">
            <summary>
            Gets the temperature of this thermocouple sensor.
            </summary>
            <remarks>
            This value is returned in degrees celcius but can easily be converted into other units. The accuracy depends on the thermocouple used. The board is calibrated during manufacture.
            </remarks>
            <value>The temperature of the thermocouple in derees celcius.</value>
            <returns>The temperature of the thermocouple in derees celcius.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="P:Phidgets.TemperatureSensorSensor.Potential">
            <summary>
            Gets the temperature of this thermocouple sensor.
            </summary>
            <remarks>
            This value is returned in degrees celcius but can easily be converted into other units. The accuracy depends on the thermocouple used. The board is calibrated during manufacture.
            </remarks>
            <value>The temperature of the thermocouple in derees celcius.</value>
            <returns>The temperature of the thermocouple in derees celcius.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="P:Phidgets.TemperatureSensorSensor.Sensitivity">
            <summary>
            Gets or sets the temperature change trigger sensitivity for the thermocouple sensor.
            </summary>
            <remarks>
            This is the ammount by which the sensed temperature must change between TemperatureChangeEvents. By default this is set to 5.
            </remarks>
            <value>The temperature change trigger sensitivity for the thermocouple sensor.</value>
            <returns>The temperature change trigger sensitivity for the thermocouple sensor.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="T:Phidgets.TemperatureSensorSensorCollection">
            <summary>
            This class represents a collection of Thermocouple sensors. All the methods and properties used to access the available thermocouple sensors are implemented in this class.
            </summary>
            <remarks>
            This class contains the count of the available thermocouple sensors and the thermocouple indexer to access the thermocouple sensors.  Currently, only one is supported.
            </remarks>
        </member>
        <member name="F:Phidgets.TemperatureSensorSensorCollection.phid">
            <summary>
            The pointer for the referenced phidget that this collection belongs to.
            </summary>
        </member>
        <member name="F:Phidgets.TemperatureSensorSensorCollection.numTemperatures">
            <summary>
            The count of total available thermocouple sensors related to the connected Phidget TemperatureSensor board pointed to by the phid.
            </summary>
        </member>
        <member name="M:Phidgets.TemperatureSensorSensorCollection.#ctor(Phidgets.TemperatureSensor)">
            <summary>
            The Collection constructor.
            </summary>
            <remarks>
            Initializes the collection and counts the number of available thermocouples.
            </remarks>
            <param name="phid">Reference to the TemperatureSensor object that this collection belongs to.</param>
            <exception cref="T:Phidgets.PhidgetException">If there was a problem connecting to phidget21 or creating the internal handle. Also, if this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TemperatureSensorSensorCollection.Item(System.Int32)">
            <summary>
            The thermocouple indexer list. This gets a reference to the TemperatureSensor object representing a termocouple sensor stored at the supplied index location in the collection list.
            </summary>
            <param name="index">The thermocouple sensor index.</param>
            <value>A reference to the thermocouple sensor object stored at the supplied index location in the collection list.</value>
            <returns>A reference to the thermocouple sensor object stored at the supplied index location in the collection list.</returns>
        </member>
        <member name="T:Phidgets.ServoServo">
            <summary>
            This class represents a servo motor for a Phidget Servo.  All the properties of a servo motor are stored and modified in this class.
            </summary>
            <remarks>
            A Phidget Servo servo motor object stores the position data for that motor.
            </remarks>
        </member>
        <member name="F:Phidgets.ServoServo.phid">
            <summary>
            The pointer for the referenced phidget that this input object relates to.
            </summary>
        </member>
        <member name="F:Phidgets.ServoServo.index">
            <summary>
            The index of this servo motor.
            </summary>
        </member>
        <member name="F:Phidgets.ServoServo.lastPosition">
            <summary>
            The last read position.
            </summary>
            <remarks>
            This variablle is updated whenever the position value is updated. It is used to recall the previous position when a Servo is re-engaged after being disengaged.
            </remarks>
        </member>
        <member name="M:Phidgets.ServoServo.#ctor(Phidgets.Servo,System.Int32)">
            <summary>
            The ServoServo class constructor.
            </summary>
            <param name="phid">Reference to the Servo object for which this analog sensor input is related.</param>
            <param name="index">Index of the servo motor.</param>
        </member>
        <member name="P:Phidgets.ServoServo.Position">
            <summary>
            Gets or sets the position property of the servo motor.
            </summary>
            <remarks>
            <para>Note that since servo motors do not offer any feedback in their interface, this value is simply whatever the servo was last set to. There is no way of determining the position of a servo that has been plugged in, until it's position has been set. Therefore, if an initial position is important, it should be set as part of initialization.</para>
            <para>The range here is -23 - 232, each corsponding aproximately to an angle in degrees. -23 corresponds to a PWM of 0, which means that the motor is not being driven at all, and so can be freely rotated. Note that most servos will not be able to operate accross this entire range.  Typically, the range might be 25 - 180 degrees, but this depends on the servo.</para>
            </remarks>
            <value>The current position of the selected motor.</value>
            <returns>The current position of the selected motor.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="P:Phidgets.ServoServo.Engaged">
            <summary>
            Gets or sets the engaged property of the servo motor.
            </summary>
            <remarks>
            <para>Setting this to true sends the servo to the currently set position - and holds it there. Setting this to
            false will the a pwm of 0 to the servo, which removes the holding force, so the servo can be freely rotated by hand.</para>
            </remarks>
            <value></value>
            <returns></returns>
            <exception cref="T:Phidgets.PhidgetException"></exception>
        </member>
        <member name="T:Phidgets.ServoServoCollection">
            <summary>
            This class represents a collection of Servo servo motors. All the methods and properties used to access the available servo motors are implemented in this class.
            </summary>
            <remarks>
            This class contains the count of the available servo motors and the Servo servo motor indexer to access the Servo servo motor objects.
            </remarks>
        </member>
        <member name="F:Phidgets.ServoServoCollection.phid">
            <summary>
            The pointer for the referenced phidget that this collection relates to.
            </summary>
        </member>
        <member name="F:Phidgets.ServoServoCollection.numMotors">
            <summary>
            The count of total available servo motors related to the connected Phidget Servo controller board pointed to by the phid.
            </summary>
        </member>
        <member name="M:Phidgets.ServoServoCollection.#ctor(Phidgets.Servo)">
            <summary>
            The Collection constructor.
            </summary>
            <remarks>
            Initializes the collection and counts the number of available servo motors.
            </remarks>
            <param name="phid">Reference to the Servo object that this collection belongs to.</param>
            <exception cref="T:Phidgets.PhidgetException">If there was a problem connecting to phidget21 or creating the internal handle. Also, if this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.ServoServoCollection.Item(System.Int32)">
            <summary>
            The Servo motor object indexer list. 
            </summary>
            <remarks>
            This gets a reference to the Servo motor object stored at the supplied index locaiton in the collection list.
            </remarks>
            <param name="index">The Servo motor object index.</param>
            <value>A reference to the Servo motor object stored at the supplied index location in the collection list.</value>
            <returns>A reference to the Servo motor object stored at the supplied index location in the collection list.</returns>
        </member>
        <member name="T:Phidgets.StepperStepper">
            <summary>
            Stepper Stepper class
            </summary>
            <remarks>
            This device is not yet released and as such this class and it's methods are not complete.
            </remarks>
        </member>
        <member name="F:Phidgets.StepperStepper.phid">
            <summary>
            TBA - Not yet implemented
            </summary>
        </member>
        <member name="F:Phidgets.StepperStepper.index">
            <summary>
            TBA - Not yet implemented
            </summary>
        </member>
        <member name="M:Phidgets.StepperStepper.#ctor(Phidgets.Stepper,System.Int32)">
            <summary>
            TBA - Not yet implemented
            </summary>
            <param name="phid">TBA - Not yet implemented</param>
            <param name="index">TBA - Not yet implemented</param>
        </member>
        <member name="P:Phidgets.StepperStepper.Acceleration">
            <summary>
            TBA - Not yet implemented
            </summary>
            <remarks>
            TBA - Not yet implemented
            </remarks>
            <value>TBA - Not yet implemented</value>
            <returns>TBA - Not yet implemented</returns>
            <exception cref="T:Phidgets.PhidgetException">TBA - Not yet implemented</exception>
        </member>
        <member name="P:Phidgets.StepperStepper.Velocity">
            <summary>
            TBA - Not yet implemented
            </summary>
            <remarks>
            TBA - Not yet implemented
            </remarks>
            <value>TBA - Not yet implemented</value>
            <returns>TBA - Not yet implemented</returns>
            <exception cref="T:Phidgets.PhidgetException">TBA - Not yet implemented</exception>
        </member>
        <member name="P:Phidgets.StepperStepper.Position">
            <summary>
            TBA - Not yet implemented
            </summary>
            <remarks>
            TBA - Not yet implemented
            </remarks>
            <value>TBA - Not yet implemented</value>
            <returns>TBA - Not yet implemented</returns>
            <exception cref="T:Phidgets.PhidgetException">TBA - Not yet implemented</exception>
        </member>
        <member name="P:Phidgets.StepperStepper.Torque">
            <summary>
            TBA - Not yet implemented
            </summary>
            <remarks>
            TBA - Not yet implemented
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">TBA - Not yet implemented</exception>
        </member>
        <member name="P:Phidgets.StepperStepper.Current">
            <summary>
            TBA - Not yet implemented
            </summary>
            <remarks>
            TBA - Not yet implemented
            </remarks>
            <value>TBA - Not yet implemented</value>
            <returns>TBA - Not yet implemented</returns>
            <exception cref="T:Phidgets.PhidgetException">TBA - Not yet implemented</exception>
        </member>
        <member name="T:Phidgets.StepperStepperCollection">
            <summary>
            Stepper Stepper collection
            </summary>
            <remarks>
            This device is not yet released and as such this class and it's methods are not complete.
            </remarks>
        </member>
        <member name="F:Phidgets.StepperStepperCollection.phid">
            <summary>
            TBA - Not yet implemented
            </summary>
        </member>
        <member name="F:Phidgets.StepperStepperCollection.numMotors">
            <summary>
            TBA - Not yet implemented
            </summary>
        </member>
        <member name="M:Phidgets.StepperStepperCollection.#ctor(Phidgets.Stepper)">
            <summary>
            TBA - Not yet implemented
            </summary>
            <remarks>
            TBA - Not yet implemented
            </remarks>
            <param name="phid">TBA - Not yet implemented</param>
            <exception cref="T:Phidgets.PhidgetException">TBA - Not yet implemented</exception>
        </member>
        <member name="P:Phidgets.StepperStepperCollection.Item(System.Int32)">
            <summary>
            TBA - Not yet implemented
            </summary>
            <remarks>
            TBA - Not yet implemented
            </remarks>
            <param name="index">TBA - Not yet implemented</param>
            <value>TBA - Not yet implemented</value>
            <returns>TBA - Not yet implemented</returns>
        </member>
        <member name="T:Phidgets.StepperDigitalInputCollection">
            <summary>
            This class represents a collection of Digital Inputs. All the methods and properties used to access the available digital inputs are implemented in this class.
            </summary>
            <remarks>
            This class contains the count of the available digital inputs and the digital input indexer to access the digital inputs.
            </remarks>
        </member>
        <member name="F:Phidgets.StepperDigitalInputCollection.phid">
            <summary>
            The pointer for the referenced phidget that this collection relates to.
            </summary>
        </member>
        <member name="F:Phidgets.StepperDigitalInputCollection.numInputs">
            <summary>
            The count of total available digital inputs related to the connected Phidget Stepper board pointed to by the phid.
            </summary>
        </member>
        <member name="M:Phidgets.StepperDigitalInputCollection.#ctor(Phidgets.Stepper)">
            <summary>
            The Collection constructor.
            </summary>
            <remarks>
            Initializes the collection and counts the number of available digital inputs.
            </remarks>
            <param name="phid">Reference to the Stepper object that this collection belongs to.</param>
            <exception cref="T:Phidgets.PhidgetException">If there was a problem connecting to phidget21 or creating the internal handle. Also, if this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.StepperDigitalInputCollection.Item(System.Int32)">
            <summary>
            The digital input indexer list. This gets the state of a digital input at the supplied index in the list.
            </summary>
            <remarks>
            Digital inputs read True where they are activated and false when they are in their default state.
            </remarks>
            <param name="index">Index of the input.</param>
            <value>State of the input.</value>
            <returns>State of the input.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="P:Phidgets.StepperDigitalInputCollection.Count">
            <summary>
            Returns the number of ditigal inputs on this Interface Kit.
            </summary>
            <remarks>
            Not all steppers have the same number of digital inputs, and some don't have any digital inputs at all.
            </remarks>
            <value>Number of digital inputs.</value>
            <returns>Number of digital inputs.</returns>
        </member>
        <member name="T:Phidgets.PhidgetCollection">
            <summary>
            This class represents a list of available or attached phidgets.
            </summary>
            <remarks>
            This class contains an indexer list storing references to attached or available phidgets.
            </remarks>
        </member>
        <member name="P:Phidgets.PhidgetCollection.Item(System.Int32)">
            <summary>
            The Phidget indexer list. This gets a reference to an attached or available phidget.
            </summary>
            <param name="index">The phidget index.</param>
            <value>The reference to the phidget stored at the provided index.</value>
            <returns>The reference to the phidget stored at the provided index.</returns>
        </member>
        <member name="T:Phidgets.MotorControlMotor">
            <summary>
            This class represents a motor for a Phidget MotorControl.  All the properties of a motor are stored and modified in this class.
            </summary>
            <remarks>A Phidget MotorControl motor object stores the motor data for that motor. The motor's acceleration and velocity can be modified in this class.</remarks>
        </member>
        <member name="F:Phidgets.MotorControlMotor.phid">
            <summary>
            The pointer for the referenced phidget that this input object relates to.
            </summary>
        </member>
        <member name="F:Phidgets.MotorControlMotor.index">
            <summary>
            The index of this motor.
            </summary>
        </member>
        <member name="M:Phidgets.MotorControlMotor.#ctor(Phidgets.MotorControl,System.Int32)">
            <summary>
            The motor class constructor.
            </summary>
            <param name="phid">Reference to the MotorControl object for which this motor belongs.</param>
            <param name="index">Index of the motor on the board.</param>
        </member>
        <member name="P:Phidgets.MotorControlMotor.Current">
            <summary>
            Gets the Current property of the motor.
            </summary>
            <remarks>The valid range is 0-255, and is a representation of current - formula to come. Note that this is not
            supported on all Motor Controllers</remarks>
            <value>The current of motor</value>
            <returns>The current of motor</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is invalid.</exception>
        </member>
        <member name="P:Phidgets.MotorControlMotor.Acceleration">
            <summary>
            Gets or sets the Acceleration property of the motor.
            </summary>
            <remarks>The valid range is 0-100, and refers to how fast the Motor Controller will change the speed of a motor.</remarks>
            <value>The acceleration of motor</value>
            <returns>The acceleration of motor</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is invalid.</exception>
        </member>
        <member name="P:Phidgets.MotorControlMotor.Velocity">
            <summary>
            Gets or sets the Velocity property of the motor.
            </summary>
            <remarks>The valid range is -100 - 100, with 0 being stopped.</remarks>
            <value>The velocity of the motor.</value>
            <returns>The velocity of the motor.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is invalid.</exception>
        </member>
        <member name="T:Phidgets.MotorControlMotorCollection">
            <summary>
            This class represents a collection of Motors. All the methods and properties used to access the available motors are implemented in this class.
            </summary>
            <remarks>This class contains the count of the available motors and the motor indexer to access the motors.</remarks>
        </member>
        <member name="F:Phidgets.MotorControlMotorCollection.phid">
            <summary>
            The pointer for the referenced phidget that this collection relates to.
            </summary>
        </member>
        <member name="F:Phidgets.MotorControlMotorCollection.numMotors">
            <summary>
            The count of total available motors related to the connected Phidget MotorControl board pointed to by the phid.
            </summary>
        </member>
        <member name="M:Phidgets.MotorControlMotorCollection.#ctor(Phidgets.MotorControl)">
            <summary>
            The Collection constructor.
            </summary>
            <remarks>Initializes the collection and counts the number of available motors.</remarks>
            <param name="phid">Reference to the MotorControl object that this collection belongs to.</param>
            <exception cref="T:Phidgets.PhidgetException">If there was a problem connecting to phidget21 or creating the internal handle. Also, if this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.MotorControlMotorCollection.Item(System.Int32)">
            <summary>
            The Motor indexer list. This gets a reference to the Motor object stored at the supplied index locaiton in the collection list.
            </summary>
            <param name="index">The Motor index.</param>
            <value>A reference to the Motor object stored at the supplied index location in the collection list.</value>
            <returns>A reference to the Motor object stored at the supplied index location in the collection list.</returns>
        </member>
        <member name="T:Phidgets.MotorControlDigitalInputCollection">
            <summary>
            This class represents a collection of Digital Inputs. All the methods and properties used to access the available digital inputs are implemented in this class.
            </summary>
            <remarks>This class contains the count of the available digital inputs and the digital input indexer to access the digital inputs.</remarks>
        </member>
        <member name="F:Phidgets.MotorControlDigitalInputCollection.phid">
            <summary>
            The pointer for the referenced phidget that this collection relates to.
            </summary>
        </member>
        <member name="F:Phidgets.MotorControlDigitalInputCollection.numInputs">
            <summary>
            The count of total available digital inputs related to the connected Phidget MotorControl board pointed to by the phid.
            </summary>
        </member>
        <member name="M:Phidgets.MotorControlDigitalInputCollection.#ctor(Phidgets.MotorControl)">
            <summary>
            The Collection constructor.
            </summary>
            <remarks>Initializes the collection and counts the number of available digital inputs.</remarks>
            <param name="phid">Reference to the MotorControl object that this collection belongs to.</param>
            <exception cref="T:Phidgets.PhidgetException">If there was a problem connecting to phidget21 or creating the internal handle. Also, if this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.MotorControlDigitalInputCollection.Item(System.Int32)">
            <summary>
            The digital input indexer list. This gets the state of a digital input at the supplied index in the list.
            </summary>
            <remarks>Digital inputs read True where they are activated and false when they are in their default state.</remarks>
            <param name="index">Index of the input.</param>
            <value>State of the input.</value>
            <returns>State of the input.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="P:Phidgets.MotorControlDigitalInputCollection.Count">
            <summary>
            Returns the number of ditigal inputs on this MotorControl.
            </summary>
            <remarks>Not all Motor Cntrollers have digital inputs.</remarks>
            <value>Number of digital inputs.</value>
            <returns>Number of digital inputs.</returns>
        </member>
        <member name="T:Phidgets.AdvancedServoServo">
            <summary>
            This class represents an advanced servo motor for a Phidget AdvancedServo.  All the properties of an advanced servo motor are stored and modified in this class.
            </summary>
            <remarks>
            This device is not yet released and as such this class and it's methods are not complete.
            </remarks>
        </member>
        <member name="F:Phidgets.AdvancedServoServo.phid">
            <summary>
            The pointer for the referenced phidget that this object belongs to.
            </summary>
        </member>
        <member name="F:Phidgets.AdvancedServoServo.index">
            <summary>
            The index of this servo motor.
            </summary>
        </member>
        <member name="M:Phidgets.AdvancedServoServo.#ctor(Phidgets.AdvancedServo,System.Int32)">
            <summary>
            TBA - Not yet implemented
            </summary>
            <param name="phid">TBA - Not yet implemented</param>
            <param name="index">TBA - Not yet implemented</param>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.Acceleration">
            <summary>
            TBA - Not yet implemented
            </summary>
            <remarks>
            TBA - Not yet implemented
            </remarks>
            <value>TBA - Not yet implemented</value>
            <returns>TBA - Not yet implemented</returns>
            <exception cref="T:Phidgets.PhidgetException">TBA - Not yet implemented</exception>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.Velocity">
            <summary>
            TBA - Not yet implemented
            </summary>
            <remarks>
            TBA - Not yet implemented
            </remarks>
            <value>TBA - Not yet implemented</value>
            <returns>TBA - Not yet implemented</returns>
            <exception cref="T:Phidgets.PhidgetException">TBA - Not yet implemented</exception>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.Position">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <value></value>
            <returns></returns>
            <exception cref="T:Phidgets.PhidgetException"></exception>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.Current">
            <summary>
            TBA - Not yet implemented
            </summary>
            <remarks>
            TBA - Not yet implemented
            </remarks>
            <value>TBA - Not yet implemented</value>
            <returns>TBA - Not yet implemented</returns>
            <exception cref="T:Phidgets.PhidgetException">TBA - Not yet implemented</exception>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.Engaged">
            <summary>
            Gets or sets the engaged property of the servo motor.
            </summary>
            <remarks>
            <para>Setting this to true sends the servo to the currently set position - and holds it there. Setting this to
            false will the a pwm of 0 to the servo, which removes the holding force, so the servo can be freely rotated by hand.</para>
            </remarks>
            <value></value>
            <returns></returns>
            <exception cref="T:Phidgets.PhidgetException"></exception>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.SpeedRamping">
            <summary>
            Gets or sets the SpeedRamping property of the servo motor.
            </summary>
            <remarks>
            <para>Setting this to true sends the servo to the currently set position - and holds it there. Setting this to
            false will the a pwm of 0 to the servo, which removes the holding force, so the servo can be freely rotated by hand.</para>
            </remarks>
            <value></value>
            <returns></returns>
            <exception cref="T:Phidgets.PhidgetException"></exception>
        </member>
        <member name="T:Phidgets.AdvancedServoServoCollection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Phidgets.AdvancedServoServoCollection.phid">
            <summary>
            
            </summary>
        </member>
        <member name="F:Phidgets.AdvancedServoServoCollection.numMotors">
            <summary>
            
            </summary>
        </member>
        <member name="P:Phidgets.AdvancedServoServoCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Phidgets.Manager">
            <summary>
            This class represents a Phidget Manager.
            </summary>
            <remarks>
            <para>The Phidget manager is a way to keep track of attached phidgets, it will send Attach and Detach events as Phidgets are added and removed fromt the system.</para>
            <para>The Phidget manager deals in base Phidget objects. These objects are not actually connected to opened Phidgets but can be used to get serial number, name, version, etc.</para>
            </remarks>
        </member>
        <member name="F:Phidgets.Manager.Devices">
            <summary>
            The list of Phidgets attached to the host computer.
            </summary>
            <remarks>
            This list is updated right before the attach and detach events, and so will be up to date within these events.
            </remarks>
        </member>
        <member name="M:Phidgets.Manager.OnAttach(Phidgets.Events.AttachEventArgs)">
            <summary>
            The On Attach method is a method that will be called when a Phidget device is attached to the machine.
            </summary>
            <remarks>
            This method will envoke all the hooked AttachEventHandler methods with the appropriate data.
            </remarks>
            <param name="e">AttachEventArgs object containing the data relating to the attach event.</param>
        </member>
        <member name="M:Phidgets.Manager.OnDetach(Phidgets.Events.DetachEventArgs)">
            <summary>
            The On Detach method is a method that will be called when a Phidget device is detached from the machine.
            </summary>
            <remarks>
            This method will envoke all the hooked DetachEventHandler methods with the appropriate data.
            </remarks>
            <param name="e">DetachEventArgs object containing the data relating to the detach event.</param>
        </member>
        <member name="M:Phidgets.Manager.OnError(Phidgets.Events.ErrorEventArgs)">
            <summary>
            The On Error method is a method that will be called when a Phidget device experiences an error.
            </summary>
            <remarks>
            This method will envoke all the hooked ErrorEventHandler methods with the appropriate data.
            </remarks>
            <param name="e">ErrorEventArgs object containing the data relating to the error event.</param>
        </member>
        <member name="M:Phidgets.Manager.#ctor">
            <summary>
            The default constructor.
            </summary>
            <remarks>
            Creating a Phidget Manager object will initialize the attach and detach handlers internally, but open still needs to be called to actually recieve event notifications.
            </remarks>
        </member>
        <member name="M:Phidgets.Manager.open">
            <summary>
            Starts the PhidgetManager.
            </summary>
            <remarks>
            This method starts the phidget manager running in the base Phidget21 C library. If attach and detach listeners are to be used, they should be registered before start is called so that no events are missed. Once start is called, the Phidget Manager will be active until close is called.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException"></exception>
        </member>
        <member name="M:Phidgets.Manager.open(System.String,System.Int32)">
            <summary>
            Open this Manager remotely using an IP Address.
            </summary>
            <remarks>
            This version of open is network based, and relies on the Phidget Webservice running at the specified Address and Port before open is called.
            </remarks>
            <param name="IPAddress">IP Address or hostname of the Phidget Webservice</param>
            <param name="port">Port of the Phidget Webservice</param>
            <exception cref="T:Phidgets.PhidgetException">if the Phidget Webservice cannot be contacted</exception>
        </member>
        <member name="M:Phidgets.Manager.open(System.String)">
            <summary>
            Open this Manager remotely using a Server ID.
            </summary>
            <remarks>
            This version of open is network based.
            </remarks>
            <param name="ServerID">ServerID of the Phidget Webservice</param>
            <exception cref="T:Phidgets.PhidgetException">if the Phidget Webservice cannot be contacted</exception>
        </member>
        <member name="M:Phidgets.Manager.open(System.String,System.Int32,System.String)">
            <summary>
            Open this Manager remotely and securely, using an IP Address.
            </summary>
            <remarks>
            This method is the same as <see>open(String ipAddress, int port)</see>, except that it specifies a password. This password can be set as a parameter when starting the Phidget Webservice.
            </remarks>
            <param name="IPAddress">IP Address or hostname of the Phidget Webservice</param>
            <param name="port">Port of the Phidget Webservice</param>
            <param name="password">Specified password</param>
            <exception cref="T:Phidgets.PhidgetException">if the Phidget Webservice cannot be contacted</exception>
        </member>
        <member name="M:Phidgets.Manager.open(System.String,System.String)">
            <summary>
            Open this Manager remotely and securely, using a Server ID.
            </summary>
            <remarks>
            This method is the same as <see>open(String serverID)</see>, except that it specifies a password. This password can be set as a parameter when starting the Phidget Webservice.
            </remarks>
            <param name="ServerID">ServerID of the Phidget Webservice</param>
            <param name="password">Specified password</param>
            <exception cref="T:Phidgets.PhidgetException">if the Phidget Webservice cannot be contacted</exception>
        </member>
        <member name="M:Phidgets.Manager.close">
            <summary>
            Shuts down the Phidget Manager.
            </summary>
            <remarks>
            This method should be called to close down the Phidget Manager. Events will no longer be recieved. This method gets calledd automatically when the class is destroyed so calling it is not required.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException"></exception>
        </member>
        <member name="M:Phidgets.Manager.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>
            Will attempt to close the manager if it has yet to be closed.
            </remarks>
        </member>
        <member name="E:Phidgets.Manager.Attach">
            <summary>
            The Handler for Attach Events.
            </summary>
            <remarks>
            <para>Will hook to user implemented AttachEventHandler methods that will be called when the event is triggered.</para>
            <para>The attach handler is a method that will be called when a Phidget is phisically attached to the system, and has gone through its initalization, and so is ready to be used.</para>
            <para>There is no limit on the number of attach handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.Manager.Detach">
             <summary>
             The Handler for Detach Events.
             </summary>
             <remarks>
             <para>Will hook to user implemented AttachEventHandler methods that will be called when the event is triggered.</para>
             <para>The detach handler is a method that will be called when a Phidget is phisically detached from the system, and is no longer available.</para>
             <para>There is no limit on the number of detach handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.Manager.Error">
            <summary>
            The Handler for Error Events.
            </summary>
            <remarks>
            <para>Will hook to user implemented ErrorEventHandler methods that will be called when the event is triggered.</para>
            <para>The error handler is a method that will be called when an error occurs with a Phidget that is phisically attached to the system.</para>
            <para>There is no limit on the number of detach handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="P:Phidgets.Manager.Address">
            <summary>
            Gets the Address of a Phidget Webservice.
            </summary>
            <value>The Address of a Phidget Webservice when this Manager was opened as remote. This may be an IP Address or a hostname.</value>
            <returns>The Address of a Phidget Webservice when this Manager was opened as remote. This may be an IP Address or a hostname.</returns>
            <exception cref="T:Phidgets.PhidgetException">if this Manager was not opened.</exception>
        </member>
        <member name="P:Phidgets.Manager.ServerID">
            <summary>
            Gets the Server ID of a Phidget Webservice.
            </summary>
            <value>The Server ID of a Phidget Webservice when this Manager was opened as remote. This is an arbitrary server identifier, independant of IP address and Port.</value>
            <returns>The Server ID of a Phidget Webservice when this Manager was opened as remote. This is an arbitrary server identifier, independant of IP address and Port.</returns>
            <exception cref="T:Phidgets.PhidgetException">if this Manager was not opened.</exception>
        </member>
        <member name="P:Phidgets.Manager.Port">
            <summary>
            The Port of a Phidget Webservice.
            </summary>
            <value>The Port of a Phidget Webservice when this Manager was opened as remote.</value>
            <returns>The Port of a Phidget Webservice when this Manager was opened as remote.</returns>
            <exception cref="T:Phidgets.PhidgetException">if this Manager was not opened.</exception>
        </member>
        <member name="P:Phidgets.Manager.AttachedToServer">
            <summary>
            Gets the attached status of this Manager.
            </summary>
            <value>The attached status of this Manager.</value>
            <returns>The attached status of this Manager.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Manager was not opened.</exception>
        </member>
        <member name="T:Phidgets.InterfaceKit">
            <summary>
            This class represents a Phidget Interface Kit. All methods to read and write data to and from an Interface Kit are implemented in this class.
            </summary>
            <remarks>
            <para>There are many types of Interface Kits, but each is simply a collection of 0 or more digital inputs, digital outpus and analog sensors. Inputs can be read and outputs can be set, and event handlers can be set for each of these.</para>
            <para>See your hardware documentation for more information on the I/O specific to your Phidget.</para>
            </remarks>
        </member>
        <member name="F:Phidgets.InterfaceKit.inputs">
            <summary>
            The collection of available digital inputs.
            </summary>
            <remarks>
            Interface Kits can have 0 or more digital inputs. See your hardware documentation for more information on the I/O specific to your Phidget.
            </remarks>
        </member>
        <member name="F:Phidgets.InterfaceKit.outputs">
            <summary>
            The collection of available digital outputs.
            </summary>
            <remarks>
            Interface Kits can have 0 or more digital outputs. See your hardware documentation for more information on the I/O specific to your Phidget.
            </remarks>
        </member>
        <member name="F:Phidgets.InterfaceKit.sensors">
            <summary>
            The collection of available analog sensor inputs.
            </summary>
            <remarks>
            Interface Kits can have 0 or more analog sensor inputs. See your hardware documentation for more information on the I/O specific to your Phidget.
            </remarks>
        </member>
        <member name="M:Phidgets.InterfaceKit.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.</remarks>
        </member>
        <member name="M:Phidgets.InterfaceKit.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>Will attempt to close the phidget if it has yet to be closed.</remarks>
        </member>
        <member name="M:Phidgets.InterfaceKit.OnInputChange(Phidgets.Events.InputChangeEventArgs)">
            <summary>
            The On Input Change method is a method that will be called when the state of a digital input changes.
            </summary>
            <remarks>This method will envoke all the hooked InputChangeEventHandler methods with the appropriate data.</remarks>
            <param name="e">InputChangeEventArgs object containing the data relating to the digital input state change.</param>
        </member>
        <member name="M:Phidgets.InterfaceKit.OnSensorChange(Phidgets.Events.SensorChangeEventArgs)">
            <summary>
            The On Sensor Change method is a method that will be called when the value of an analog sensor input changes.
            </summary>
            <remarks>This method will envoke all the hooked SensorChangeEventHandler methods with the appropriate data.</remarks>
            <param name="e">SensorChangeEventArgs object containing the data relating to the analog sensor input change.</param>
        </member>
        <member name="M:Phidgets.InterfaceKit.OnOutputChange(Phidgets.Events.OutputChangeEventArgs)">
            <summary>
            The On Output Change method is a method that will be called when the state of a digital output changes.
            </summary>
            <remarks>This method will envoke all the hooked OutputChangeEventHandler methods with the appropriate data.</remarks>
            <param name="e">OutputChangeEventArgs object containing the data relating to the digital output state change.</param>
        </member>
        <member name="M:Phidgets.InterfaceKit.DetachEvent(System.Object,Phidgets.Events.DetachEventArgs)">
            <summary>
            The Detach Event.  This event is triggered when a Phidget InterfaceKit is detached from the computer.
            </summary>
            <remarks>Inherited from the Phidget base class.</remarks>
            <param name="sender">The object that triggered the event</param>
            <param name="e">A DetachEventArgs object containing data and information related to the detach event.</param>
        </member>
        <member name="M:Phidgets.InterfaceKit.AttachEvent(System.Object,Phidgets.Events.AttachEventArgs)">
            <summary>
            The Attach Event.  This event is triggered when a Phidget InterfaceKit is attached to the computer.
            </summary>
            <remarks>Inherited from the Phidget base class.</remarks>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">A AttachEventArgs object containing data and information related to the attach event.</param>
        </member>
        <member name="P:Phidgets.InterfaceKit.ratiometric">
            <summary>
            Sets whether to use a ratiometric or fixed reference on the analog inputs.
            </summary>
            <remarks>
            <para>Most sensors use the ratiometric model, where the returned value will be between 0 and +Vdd, where Vdd is the voltage supplied
            to the sensor - approximately 5v.</para>
            <para>Some sensors output a specific voltage regardless of their supply voltage, and for these we provide a non-ratiometric
            fixed +5v reference.</para>
            <para>The default value for this is ratiometric (true).</para>
            <para>This only applies to interfacekit boards with analog inputs (8/8/8, TextLCD 8/8/8).</para>
            </remarks>
            <value>
            </value>
            <exception cref="T:Phidgets.PhidgetException">If ratiometric is not supported, or the InterfaceKit is not attached.</exception>
        </member>
        <member name="E:Phidgets.InterfaceKit.InputChange">
            <summary>
            The digital input state Change Event Handler delegate.
            </summary>
            <remarks>
            <para>Will hook to user implemented InputChangeEventHandler methods that will be called when the event is triggered.</para>
            <para>The input change handler is a method that will be called when an input on this InteraceKit board has changed.</para>
            <para>There is no limit on the number of input change handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.InterfaceKit.SensorChange">
            <summary>
            The analog sensor input Change Event Handler delegate.
            </summary>
            <remarks>
            <para>Will hook to user implemented SensorChangeEventHandler methods that will be called when the event is triggered.</para>
            <para>The sensor change handler is a method that will be called when a sensor on this Interface Kit has changed by at least the Sensitivity value that has been set for this sensor.</para>
            <para>There is no limit on the number of sensor change handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.InterfaceKit.OutputChange">
            <summary>
            The digital output state Change Event Handler delegate.
            </summary>
            <remarks>
            <para>Will hook to user implemented OutputChangeEventHandler methods that will be called when the event is triggered.</para>
            <para>The output change handler is a method that will be called when an output on this InteraceKit board has changed.</para>
            <para>There is no limit on the number of output change handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="T:Phidgets.MotorControl">
            <summary>
            This class represents a Phidget Motor Controller. All methods to to control a motor controller and read back motor data are implemented in this class.
            </summary>
            <remarks>
            <para>The Motor Control Phidget is able to control 1 or more DC motors. Both speed and acceleration are controllable. Speed is controlled via PWM. The size of the motors that can be driven depends on the motor controller. See your hardware documentation for more information.</para>
            <para>The motor Controller boards also has 0 or more digital inputs.</para>
            </remarks>
        </member>
        <member name="F:Phidgets.MotorControl.motors">
            <summary>
            The collection of available motors.
            </summary>
            <remarks>The Motor Control Phidget is able to control 1 or more DC motors.</remarks>
        </member>
        <member name="F:Phidgets.MotorControl.inputs">
            <summary>
            The collection of available digital inputs.
            </summary>
            <remarks>The motor Controller boards has 0 or more digital inputs.</remarks>
        </member>
        <member name="M:Phidgets.MotorControl.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.</remarks>
        </member>
        <member name="M:Phidgets.MotorControl.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>Will attempt to close the phidget if it has yet to be closed.</remarks>
        </member>
        <member name="M:Phidgets.MotorControl.OnVelocityChange(Phidgets.Events.VelocityChangeEventArgs)">
            <summary>
            The On Velocity Change method is a method that will be called when the velocity of a motor changes.
            </summary>
            <remarks>This method will envoke all the hooked VelocityChangeEventHandler methods with the appropriate data.</remarks>
            <param name="e">VelocityChangeEventArgs object containing the data relating to the velocity change.</param>
        </member>
        <member name="M:Phidgets.MotorControl.OnCurrentChange(Phidgets.Events.CurrentChangeEventArgs)">
            <summary>
            The On Current Change method is a method that will be called when the current consumed by a motor changes.
            </summary>
            <remarks>This method will envoke all the hooked CurrentChangeEventHandler methods with the appropriate data.</remarks>
            <param name="e">CurrentChangeEventArgs object containing the data relating to the current consumed change.</param>
        </member>
        <member name="M:Phidgets.MotorControl.OnInputChange(Phidgets.Events.InputChangeEventArgs)">
            <summary>
            The On Input Change method is a method that will be called when the state of a digital input changes.
            </summary>
            <remarks>This method will envoke all the hooked InputChangeEventHandler methods with the appropriate data.</remarks>
            <param name="e">InputChangeEventArgs object containing the data relating to the digital input state change.</param>
        </member>
        <member name="M:Phidgets.MotorControl.DetachEvent(System.Object,Phidgets.Events.DetachEventArgs)">
            <summary>
            The Detach Event.  This event is triggered when a Phidget MotorControl is detached from the computer.
            </summary>
            <remarks>Inherited from the Phidget base class.</remarks>
            <param name="sender">The object that triggered the event</param>
            <param name="e">A DetachEventArgs object containing data and information related to the detach event.</param>
        </member>
        <member name="M:Phidgets.MotorControl.AttachEvent(System.Object,Phidgets.Events.AttachEventArgs)">
            <summary>
            The Attach Event.  This event is triggered when a Phidget MotorControl is attached to the computer.
            </summary>
            <remarks>Inherited from the Phidget base class.</remarks>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An AttachEventArgs object containing data and information related to the attach event.</param>
        </member>
        <member name="E:Phidgets.MotorControl.VelocityChange">
            <summary>
            The Velocity Change Event Handler delegate.
            </summary>
            <remarks>
            <para>Will hook to user implemented VelocityChangeEventHandler methods that will be called when the event is triggered.</para>
            <para>he velocity change handler is a method that will be called when the velocity of a motor changes. These velocity changes are reported back from the Motor Controller and so correspond to actual motor speeds over time.</para>
            <para>There is no limit on the number of velocity change handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.MotorControl.CurrentChange">
            <summary>
            The Current Change Event Handler delegate.
            </summary>
            <remarks>
            <para>Will hook to user implemented CurrentChangeEventHandler methods that will be called when the event is triggered.</para>
            <para>The current change handler is a method that will be called when the current consumed by a motor changes.</para>
            <para>There is no limit on the number of current change handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.MotorControl.InputChange">
            <summary>
            The digital input state Change Event Handler delegate.
            </summary>
            <remarks>
            <para>Will hook to user implemented InputChangeEventHandler methods that will be called when the event is triggered.</para>
            <para>The input change handler is a method that will be called when an input on this MotorControl board has changed.</para>
            <para>There is no limit on the number of input change handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="T:Phidgets.Accelerometer">
            <summary>
            <para>This class represents a Phidget Accelerometer. All methods to read acceleration data from an Accelerometer are implemented in this class.</para>
            </summary>
            <remarks>
            <para>The Phidget Accelerometer provides 2-3 axes of acceleration data, at anywhere from 2g to 10g sensitivity, depending on the specific revision. See your hardware documetation for more information. They can measure both static (gravity) and dynamic acceleration.</para>
            </remarks>
        </member>
        <member name="F:Phidgets.Accelerometer.axes">
            <summary>
            The collection of accelerometer axes.
            </summary>
            <remarks>
            <para>Currently, accelerometers have either two or three axes of acceleration - x and y, or x, y, abd z.</para>
            <para>The indexes of which - Index 0 is the x-axis, 1 is the y-axis, and 2 is the z-axis (where available).</para>
            </remarks>
        </member>
        <member name="F:Phidgets.Accelerometer.nativeAccelerationChangeEventCallback">
            <summary>
            Acceleration Change event callback.
            </summary>
        </member>
        <member name="M:Phidgets.Accelerometer.#ctor">
            <summary>
            Accelerometer constructor.
            </summary>
        </member>
        <member name="M:Phidgets.Accelerometer.Finalize">
            <summary>
            Accelerometer deconstructor.
            </summary>
            <remarks>
            Will attempt to close the Phidget device.
            </remarks>
        </member>
        <member name="M:Phidgets.Accelerometer.OnAccelerationChange(Phidgets.Events.AccelerationChangeEventArgs)">
            <summary>
            The OnAccelerationChange event. The acceleration change event is a method that will be called when the acceleration of an axis has changed triggering an acceleration change event.
            </summary>
            <param name="e">AccelerationChangeEventArgs object containing the data relating to the acceleration change.</param>
        </member>
        <member name="M:Phidgets.Accelerometer.DetachEvent(System.Object,Phidgets.Events.DetachEventArgs)">
            <summary>
            The Detach Event.  This event is triggered when a Phidget Accelerometer is detached from the computer.
            </summary>
            <remarks>
            Inherited from the Phidget base class
            </remarks>
            <param name="sender">The object that triggered the event</param>
            <param name="e">A DetachEventArgs object containing data and information related to the detach event.</param>
        </member>
        <member name="M:Phidgets.Accelerometer.AttachEvent(System.Object,Phidgets.Events.AttachEventArgs)">
            <summary>
            The Attach Event.  This event is triggered when a Phidget Accelerometer is attached to the computer.
            </summary>
            <remarks>
            Inherited from the Phidget base class
            </remarks>
            <param name="sender">The object that triggered the event</param>
            <param name="e">A DetachEventArgs object containing data and information related to the detach event.</param>
        </member>
        <member name="E:Phidgets.Accelerometer.AccelerationChange">
            <summary>
            The Acceleration Change event handler delegate.
            </summary>
            <remarks>
            Will hook to user implemented AccelerationChangeEventHandler methods that will be called when the event is triggered.
            </remarks>
        </member>
        <member name="T:Phidgets.EncoderEncoderCollection">
            <summary>
            This class represents a collection of Encoders. All the methods and properties used to axes the available encoders are implemented in this class.
            </summary>
            <remarks>
            This class contains the count of the available encoders and the encoder indexer to access the encoders.
            </remarks>
        </member>
        <member name="F:Phidgets.EncoderEncoderCollection.phid">
            <summary>
            The pointer for the referenced phidget that this collection relates to.
            </summary>
        </member>
        <member name="F:Phidgets.EncoderEncoderCollection.numEncoders">
            <summary>
            The count of total available encoders related to the connected Phidget Encoder board pointed to by the phid.
            </summary>
        </member>
        <member name="M:Phidgets.EncoderEncoderCollection.#ctor(Phidgets.Encoder)">
            <summary>
            The Collection constructor.
            </summary>
            <remarks>Initializes the collection and counts the number of available encoders.</remarks>
            <param name="phid">Reference to the Encoder object that this collection belongs to.</param>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.EncoderEncoderCollection.Item(System.Int32)">
            <summary>
            The encoder indexer list. This gets or sets the encoder position according to the provided index.
            </summary>
            <remarks>
            <para>Sets the position of a specific encoder. This resets the internal position count for an encoder. This call in no way actually sends information to the device, as an absolute position is maintained only in the library.</para>
            <para>After this call, position changes from the encoder will use the new value to calculate absolute position by using the return from the get property.</para>
            <para>Returns the position of an encoder through the get property. This is an absolute position as calcutated since the encoder was plugged in.</para>
            </remarks>
            <value>
            The position of an encoder through the get property. This is an absolute position as calcutated since the encoder was plugged in.
            </value>
            <param name="index">The encoder index.</param>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="P:Phidgets.EncoderEncoderCollection.Count">
            <summary>
            The number of available encoders.
            </summary>
            <remarks>
            The count property gets the total number of available encoders.
            </remarks>
            <value>
            The count property gets the total number of available encoders.
            </value>
        </member>
        <member name="T:Phidgets.EncoderDigitalInputCollection">
            <summary>
            This class represents a collection of Digital Inputs. All the methods and properties used to access the available digital inputs are implemented in this class.
            </summary>
            <remarks>
            This class contains the count of the available digital inputs and the digital input indexer to access the digital inputs.
            </remarks>
        </member>
        <member name="F:Phidgets.EncoderDigitalInputCollection.phid">
            <summary>
            The pointer for the referenced phidget that this collection relates to.
            </summary>
        </member>
        <member name="F:Phidgets.EncoderDigitalInputCollection.numInputs">
            <summary>
            The count of total available digital inputs related to the connected Phidget Encoder board pointed to by the phid.
            </summary>
        </member>
        <member name="M:Phidgets.EncoderDigitalInputCollection.#ctor(Phidgets.Encoder)">
            <summary>
            The Collection constructor.
            </summary>
            <remarks>
            Initializes the collection and counts the number of available digital inputs.
            </remarks>
            <param name="phid">Reference to the Encoder object that this collection belongs to.</param>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.EncoderDigitalInputCollection.Item(System.Int32)">
            <summary>
            The digital input indexer list. This gets the state of a digital input at the supplied index in the list.
            </summary>
            <remarks>
            On the mechanical encoder this refers to the pushbutton. The high speed encoder does not have any digital inputs. A value of true means that the input is active(the button is pushed).
            </remarks>
            <param name="index">index of the input</param>
            <returns>state of the input</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="P:Phidgets.EncoderDigitalInputCollection.Count">
            <summary>
            Returns number of digital inputs.
            </summary>
            <remarks>
            On the mechanical encoder this refers to the pushbutton. The high speed encoder does not have any digital inputs.
            </remarks>
            <returns>
            number of inputs
            </returns>
        </member>
        <member name="T:Phidgets.AdvancedServo">
            <summary>
            This class represents a Phidget Advanced Servo Controller. All methods to to control a motor controller and read back motor data are implemented in this class.
            </summary>
            <remarks>
            This device is not yet released and as such this class and it's methods are not complete.
            </remarks>
        </member>
        <member name="F:Phidgets.AdvancedServo.servos">
            <summary>
            The collection of available servos.
            </summary>
        </member>
        <member name="M:Phidgets.AdvancedServo.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>
            Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.
            </remarks>
        </member>
        <member name="M:Phidgets.AdvancedServo.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>
            Will attempt to close the phidget if it has yet to be closed.
            </remarks>
        </member>
        <member name="M:Phidgets.AdvancedServo.DetachEvent(System.Object,Phidgets.Events.DetachEventArgs)">
            <summary>
            The Detach Event.  This event is triggered when a Phidget AdvancedServo is detached from the computer.
            </summary>
            <remarks>
            Inherited from the Phidget base class.
            </remarks>
            <param name="sender">The object that triggered the event</param>
            <param name="e">A DetachEventArgs object containing data and information related to the detach event.</param>
        </member>
        <member name="M:Phidgets.AdvancedServo.AttachEvent(System.Object,Phidgets.Events.AttachEventArgs)">
            <summary>
            The Attach Event.  This event is triggered when a Phidget AdvancedServo is attached to the computer.
            </summary>
            <remarks>
            Inherited from the Phidget base class.
            </remarks>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An AttachEventArgs object containing data and information related to the attach event.</param>
        </member>
        <member name="E:Phidgets.AdvancedServo.PositionChange">
            <summary>
            Handler for Position Change Events.
            </summary>
            <remarks>
            <para>Will hook to user implemented PositionChangeEventHandler methods that will be called when the event is triggered.</para>
            <para>The servo position change handler is a method that will be called when the servo position has changed. The event will get fired after every call to setPosition.</para>
            <para>There is no limit on the number of servo position change handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.AdvancedServo.CurrentChange">
            <summary>
            Handler for Current Change Events.
            </summary>
            <remarks>
            <para>Will hook to user implemented CurrentChangeEventHandler methods that will be called when the event is triggered.</para>
            <para>The current change handler is a method that will be called when the current consumed by a motor changes.</para>
            <para>There is no limit on the number of current change handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.AdvancedServo.VelocityChange">
            <summary>
            Handler for Velocity Change Events.
            </summary>
            <remarks>
            <para>Will hook to user implemented VelocityChangeEventHandler methods that will be called when the event is triggered.</para>
            <para>The velocity change handler is a method that will be called when the velocity of a servo changes.</para>
            <para>There is no limit on the number of current change handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="T:Phidgets.WeightSensor">
            <summary>
            This class represents a Phidget Weight Sensor. All methods to read weight data from the weight sensor are implemented in this class.
            </summary>
            <remarks>
            The Phidget Weight Sensor is simply an electronic scale with a USB interface. It provides one weight value, in kg.
            </remarks>
        </member>
        <member name="F:Phidgets.WeightSensor.sensor">
            <summary>
            The Phidget WeightSensor's weight sensor object.
            </summary>
            <remarks>
            This object represents the physical weight sensor on the board and the data it holds.
            </remarks>
        </member>
        <member name="M:Phidgets.WeightSensor.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>
            Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.
            </remarks>
        </member>
        <member name="M:Phidgets.WeightSensor.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>
            Will attempt to close the phidget if it has yet to be closed.
            </remarks>
        </member>
        <member name="M:Phidgets.WeightSensor.OnWeightChange(Phidgets.Events.WeightChangeEventArgs)">
            <summary>
            The On Weight Change method is a method that will be called when the sensed weight changes.
            </summary>
            <remarks>
            This method will envoke all the hooked WeightChangeEventHandler methods with the appropriate data.
            </remarks>
            <param name="e">WeightChangeEventArgs object containing the data relating to the weight change.</param>
        </member>
        <member name="M:Phidgets.WeightSensor.DetachEvent(System.Object,Phidgets.Events.DetachEventArgs)">
            <summary>
            The Detach Event.  This event is triggered when a Phidget WeightSensor is detached from the computer.
            </summary>
            <remarks>
            Inherited from the Phidget base class.
            </remarks>
            <param name="sender">The object that triggered the event</param>
            <param name="e">A DetachEventArgs object containing data and information related to the detach event.</param>
        </member>
        <member name="M:Phidgets.WeightSensor.AttachEvent(System.Object,Phidgets.Events.AttachEventArgs)">
            <summary>
            The Attach Event.  This event is triggered when a Phidget WeightSensor is attached to the computer.
            </summary>
            <remarks>
            Inherited from the Phidget base class.
            </remarks>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An AttachEventArgs object containing data and information related to the attach event.</param>
        </member>
        <member name="E:Phidgets.WeightSensor.WeightChange">
            <summary>
            The Weight Change Event Handler delegate.
            </summary>
            <remarks>
            <para>Will hook to user implemented WeightChangeEventHandler methods that will be called when the event is triggered.</para>
            <para>The weight change handler is a method that will be called when the weight has changed by at least the Sensitivity trigger that has been set.</para>
            <para>There is no limit on the number of weight change handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="T:Phidgets.LED">
            <summary>
            This class represents a Phidget LED. All methods to control a Phidget LED are implemented in this class.
            </summary>
            <remarks>
            <para>The Phidget LED is a board that is meant for driving LEDs. Currently, the only available version drives 64 LEDs, but other versions may become available so this number is not absolute.</para>
            <para>LEDs can be controlled individually, at brightness levels from 0-100.</para>
            </remarks>
        </member>
        <member name="F:Phidgets.LED.leds">
            <summary>
            The collection of available digital inputs.
            </summary>
            <remarks>Currently, the only available version of the Phidget LED drives 64 LEDs, but other versions may become available so this number is not absolute.</remarks>
        </member>
        <member name="M:Phidgets.LED.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.</remarks>
        </member>
        <member name="M:Phidgets.LED.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>Will attempt to close the phidget if it has yet to be closed.</remarks>
        </member>
        <member name="M:Phidgets.LED.DetachEvent(System.Object,Phidgets.Events.DetachEventArgs)">
            <summary>
            The Detach Event.  This event is triggered when a Phidget LED is detached from the computer.
            </summary>
            <remarks>Inherited from the Phidget base class.</remarks>
            <param name="sender">The object that triggered the event</param>
            <param name="e">A DetachEventArgs object containing data and information related to the detach event.</param>
        </member>
        <member name="M:Phidgets.LED.AttachEvent(System.Object,Phidgets.Events.AttachEventArgs)">
            <summary>
            The Attach Event.  This event is triggered when a Phidget LED is attached to the computer.
            </summary>
            <remarks>Inherited from the Phidget base class.</remarks>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An AttachEventArgs object containing data and information related to the attach event.</param>
        </member>
        <member name="T:Phidgets.Dictionary">
            <summary>
            This class represents the Phidget Dictionary.
            </summary>
            <remarks>
            <para>The Phidget Dictionary is a service provided by the Phidget Webservice. The Webservice maintains a centralized dictionary of key-value pairs that can be accessed and changed from any number of clients.</para>
            <para>Note that the Webservice uses this dictionary to control access to Phidgets through the openRemote and openRemoteIP interfaces, and as such, you should never add or modify a key that starts with /PSK/ or /PCK/, unless you want to explicitly modify Phidget specific data – and this is highly discouraged, as it’s very easy to break things. Listening to these keys is fine if so desired.</para>
            <para>The intended use for the dictionary is as a central repository for communication and persistent storage of data between several client applications. As an example - a higher level interface exposed by one application – which controls the Phidgets, for others to access – rather then every client talking directly to the Phidgets themselves.</para>
            <para>The dictionary makes use of extended regular expressions for key matching.</para>
            </remarks>
        </member>
        <member name="M:Phidgets.Dictionary.#ctor">
            <summary>
            The default constructor.
            </summary>
            <remarks>
            Creating a Phidget Dictionary object will initialize the dictionary handle internally, but open still needs to be called to actually work with it.
            </remarks>
        </member>
        <member name="M:Phidgets.Dictionary.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>
            Will attempt to close the dictionary if it has yet to be closed.
            </remarks>
        </member>
        <member name="M:Phidgets.Dictionary.OnError(Phidgets.Events.ErrorEventArgs)">
            <summary>
            The On Error method is a method that will be called when an error occurrs.
            </summary>
            <remarks>
            This method will envoke all the hooked ErrorEventHandler methods with the appropriate data.
            </remarks>
            <param name="e">ErrorEventArgs object containing the data relating to the error.</param>
        </member>
        <member name="M:Phidgets.Dictionary.open(System.String,System.Int32)">
            <summary>
            Open this Dictionary remotely and securely, using an IP Address.
            </summary>
            <remarks>
            This version of open is network based, and relies on the Phidget Webservice running at the specified Address and Port before open is called.
            </remarks>
            <param name="IPAddress">IP Address or hostname of the Phidget Webservice</param>
            <param name="port">Port of the Phidget Webservice</param>
            <exception cref="T:Phidgets.PhidgetException">if the Phidget Webservice cannot be contacted</exception>
        </member>
        <member name="M:Phidgets.Dictionary.open(System.String)">
            <summary>
            Open this Dictionary remotely using a Server ID.
            </summary>
            <remarks>This version of open is network based.</remarks>
            <param name="ServerID">ServerID of the Phidget Webservice</param>
            <exception cref="T:Phidgets.PhidgetException">if the Phidget Webservice cannot be contacted</exception>
        </member>
        <member name="M:Phidgets.Dictionary.open(System.String,System.Int32,System.String)">
            <summary>
            Open this Dictionary remotely and securely, using an IP Address.
            </summary>
            <remarks>
            This method is the same as <see>open(String ipAddress, int port)</see>, except that it specifies a password. This password can be set as a parameter when starting the Phidget Webservice.
            </remarks>
            <param name="IPAddress">IP Address or hostname of the Phidget Webservice</param>
            <param name="port">Port of the Phidget Webservice</param>
            <param name="password">Specified password</param>
            /// <exception cref="T:Phidgets.PhidgetException">if the Phidget Webservice cannot be contacted</exception>
        </member>
        <member name="M:Phidgets.Dictionary.open(System.String,System.String)">
            <summary>
            Open this Dictionary remotely and securely, using a Server ID.
            </summary>
            <remarks>
            This method is the same as <see>open(String serverID)</see>, except that it specifies a password. This password can be set as a parameter when starting the Phidget Webservice.
            </remarks>
            <param name="ServerID">ServerID of the Phidget Webservice</param>
            <param name="password">Specified password</param>
            <exception cref="T:Phidgets.PhidgetException">if the Phidget Webservice cannot be contacted</exception>
        </member>
        <member name="M:Phidgets.Dictionary.close">
            <summary>
            Closes this Dictionary.
            </summary>
            <remarks>
            This will shut down all threads dealing with this Dictionary and you won't recieve any more events.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">if this Dictionary was not opened.</exception>
        </member>
        <member name="M:Phidgets.Dictionary.add(System.String,System.String,System.Boolean)">
            <summary>
            Adds a new key to the Dictionary, or modifies the value of an existing key.
            </summary>
            <param name="key">The key can only contain numbers, letters, ‘/’, ‘.’, ‘-‘, ‘_’, and must begin with a letter, ‘_’ or ‘/’.</param>
            <param name="value">The value can contain any value.</param>
            <param name="persistent">he persistent value controls whether a key will stay in the dictionary after the client that created it disconnects. If persistent == 0, the key is removed when the connection closes. Otherwise the key remains in the dictionary until it is explicitly removed.</param>
            <exception cref="T:Phidgets.PhidgetException">if this Dictionary was not opened.</exception>
        </member>
        <member name="M:Phidgets.Dictionary.add(System.String,System.String)">
            <summary>
            Adds a new key to the Dictionary, or modifies the value of an existing key.
            </summary>
            <remarks>The key will stay in the dictionary until explicitly removed.</remarks>
            <param name="key">The key can only contain numbers, letters, ‘/’, ‘.’, ‘-‘, ‘_’, and must begin with a letter, ‘_’ or ‘/’.</param>
            <param name="value">The value can contain any value.</param>
        </member>
        <member name="M:Phidgets.Dictionary.remove(System.String)">
            <summary>
            Removes a key, or set of keys, from the Dictionary.
            </summary>
            <param name="keypattern">The key name is a regular expressions pattern, and so care must be taken to only have it match the specific keys you want to remove.</param>
            <exception cref="T:Phidgets.PhidgetException">if this Dictionary was not opened.</exception>
        </member>
        <member name="M:Phidgets.Dictionary.get(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="E:Phidgets.Dictionary.Error">
            <summary>
            The Handler for Error Events.
            </summary>
            <remarks>
            Will hook to user implemented ErrorEventHandler methods that will be called when the event is triggered.
            </remarks>
        </member>
        <member name="P:Phidgets.Dictionary.Address">
            <summary>
            Gets the address of the Phidget Webservice.
            </summary>
            <remarks>This may be an IP Address or a hostname.</remarks>
            <value>The Address of a Phidget Webservice when this Dictionary was opened as remote.</value>
            <returns>The Address of a Phidget Webservice when this Dictionary was opened as remote.</returns>
            <exception cref="T:Phidgets.PhidgetException">if this Dictionary was not opened.</exception>
        </member>
        <member name="P:Phidgets.Dictionary.ServerID">
            <summary>
            Gets the Server ID of a Phidget Webservice.
            </summary>
            <remarks>
            This is an arbitrary server identifier, independant of IP address and Port.
            </remarks>
            <value>The Server ID of a Phidget Webservice when this Dictionary was opened as remote.</value>
            <returns>The Server ID of a Phidget Webservice when this Dictionary was opened as remote.</returns>
            <exception cref="T:Phidgets.PhidgetException">if this Dictionary was not opened.</exception>
        </member>
        <member name="P:Phidgets.Dictionary.Port">
            <summary>
            Gets the Port of a Phidget Webservice.
            </summary>
            <value>The Port of a Phidget Webservice when this Dictionary was opened as remote.</value>
            <returns>The Port of a Phidget Webservice when this Dictionary was opened as remote.</returns>
            <exception cref="T:Phidgets.PhidgetException">if this Dictionary was not opened.</exception>
        </member>
        <member name="P:Phidgets.Dictionary.AttachedToServer">
            <summary>
            Gets the attached status of this Dictionary.
            </summary>
            <value>The attached status of this Dictionary.</value>
            <returns>The attached status of this Dictionary.</returns>
            <exception cref="T:Phidgets.PhidgetException">if this Dictionary was not opened.</exception>
        </member>
        <member name="T:Phidgets.KeyListener">
            <summary>
            This class represents a key listener.
            </summary>
            <remarks>
            This key listener is used, along with the Dictionary object, to set up listener for specific keys, or groups of keys. Events are available for key add or change, and for key removal.
            </remarks>
        </member>
        <member name="F:Phidgets.KeyListener.KeyPattern">
            <summary>
            The key pattern.
            </summary>
        </member>
        <member name="M:Phidgets.KeyListener.#ctor(Phidgets.Dictionary,System.String)">
            <summary>
            Creates a new key listener, for a specific pattern, on a specific dictionary object. The pattern is a regular expression.
            </summary>
            <param name="Dict"></param>
            <param name="KeyPattern"></param>
        </member>
        <member name="M:Phidgets.KeyListener.start">
            <summary>
            Start this key listener.
            </summary>
            <remarks>
            This method should not be called until the coresponding dictionary is connected.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException"></exception>
        </member>
        <member name="M:Phidgets.KeyListener.stop">
            <summary>
            Stop this key listener.
            </summary>
            <exception cref="T:Phidgets.PhidgetException"></exception>
        </member>
        <member name="M:Phidgets.KeyListener.OnKeyChange(Phidgets.Events.KeyEventArgs)">
            <summary>
            The On Key Change method is a method that will be called when the key changes.
            </summary>
            <remarks>
            This method will envoke all the hooked KeyEventHandler methods to KeyChange with the appropriate data.
            </remarks>
            <param name="e">KeyEventArgs object containing the data relating to the key change.</param>
        </member>
        <member name="M:Phidgets.KeyListener.OnKeyRemoval(Phidgets.Events.KeyEventArgs)">
            <summary>
            The On Key Removal method is a method that will be called when the key is removed.
            </summary>
            <remarks>
            This method will envoke all the hooked KeyEventHandler methods to KeyRemoval with the appropriate data.
            </remarks>
            <param name="e">KeyEventArgs object containing the data relating to the key removal.</param>
        </member>
        <member name="E:Phidgets.KeyListener.KeyChange">
            <summary>
            Handler for key change events.  This also applies for key add events.
            </summary>
            <remarks>
            Will hook to user implemented KeyEventHandler methods to KeyChange that will be called when the event is triggered.
            </remarks>
        </member>
        <member name="E:Phidgets.KeyListener.KeyRemoval">
            <summary>
            Handler for key removal events.
            </summary>
            <remarks>
            Will hook to user implemented KeyEventHandler methods to KeyRemoval that will be called when the event is triggered.
            </remarks>
        </member>
        <member name="T:Phidgets.RFIDDigitalOutputCollection">
            <summary>
            This class represents a collection of Digital Outputs. All the methods and properties used to access the available digital outputs are implemented in this class.
            </summary>
            <remarks>
            This class contains the count of the available digital outputs and the digital input indexer to access the digital outputs.
            </remarks>
        </member>
        <member name="F:Phidgets.RFIDDigitalOutputCollection.phid">
            <summary>
            The pointer for the referenced phidget that this collection relates to.
            </summary>
        </member>
        <member name="F:Phidgets.RFIDDigitalOutputCollection.numOutputs">
            <summary>
            The count of total available digital outputs related to the connected Phidget RFID reader board pointed to by the phid.
            </summary>
        </member>
        <member name="M:Phidgets.RFIDDigitalOutputCollection.#ctor(Phidgets.RFID)">
            <summary>
            The Collection constructor.
            </summary>
            <remarks>
            Initializes the collection and counts the number of available digital outputs.
            </remarks>
            <param name="phid">Reference to the RFID object that this collection belongs to.</param>
            <exception cref="T:Phidgets.PhidgetException">If there was a problem connecting to phidget21 or creating the internal handle. Also, if this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.RFIDDigitalOutputCollection.Item(System.Int32)">
            <summary>
            The digital output indexer list. This gets or sets the state of a digital output at the supplied index in the list.
            </summary>
            <remarks>
            True indicated activated, False deactivated, which is the default.
            </remarks>
            <param name="index">Index of the output.</param>
            <value>The state of the output.</value>
            <returns>The state of the output.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, of the index is out of range.</exception>
        </member>
        <member name="P:Phidgets.RFIDDigitalOutputCollection.Count">
            <summary>
            Returns the number of outputs.
            </summary>
            <remarks>
            These are the outputs provided by the terminal block. Older RFID readers do not have these outputs, and this method will return 0.
            </remarks>
        </member>
        <member name="T:Phidgets.Servo">
            <summary>
            This class represents a Phidget servo Controller. All methods to control a Servo Controller are implemented in this class.
            </summary>
            <remarks>
            he Phidget Sevo controller simply outputs varying widths of PWM, which is what most servo motors take as an input driving signal.
            </remarks>
        </member>
        <member name="F:Phidgets.Servo.servos">
            <summary>
            The collection of available servos.
            </summary>
            <remarks>
            Note that there is no way of programatically determining how many motors are actually attached to the board.
            </remarks>
        </member>
        <member name="M:Phidgets.Servo.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>
            Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.
            </remarks>
        </member>
        <member name="M:Phidgets.Servo.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>
            Will attempt to close the phidget if it has yet to be closed.
            </remarks>
        </member>
        <member name="M:Phidgets.Servo.OnPositionChange(Phidgets.Events.PositionChangeEventArgs)">
            <summary>
            The On Position Change method is a method that will be called when the position of a Servo motor is changed.
            </summary>
            <remarks>
            This method will envoke all the hooked PositionChangeEventHandler methods with the appropriate data.
            </remarks>
            <param name="e">PositionChangeEventArgs object containing the data relating to the Servo motor position change.</param>
        </member>
        <member name="M:Phidgets.Servo.DetachEvent(System.Object,Phidgets.Events.DetachEventArgs)">
            <summary>
            The Detach Event.  This event is triggered when a Phidget Servo is detached from the computer.
            </summary>
            <remarks>
            Inherited from the Phidget base class.
            </remarks>
            <param name="sender">The object that triggered the event</param>
            <param name="e">A DetachEventArgs object containing data and information related to the detach event.</param>
        </member>
        <member name="M:Phidgets.Servo.AttachEvent(System.Object,Phidgets.Events.AttachEventArgs)">
            <summary>
            The Attach Event.  This event is triggered when a Phidget Servo is attached to the computer.
            </summary>
            <remarks>
            Inherited from the Phidget base class.
            </remarks>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An AttachEventArgs object containing data and information related to the attach event.</param>
        </member>
        <member name="E:Phidgets.Servo.PositionChange">
            <summary>
            The Position Change Event Handler delegate.
            </summary>
            <remarks>
            <para>Will hook to user implemented PositionChangeEventHandler methods that will be called when the event is triggered.</para>
            <para>he servo position change handler is a method that will be called when the servo position has changed. The event will get fired after every modification made to the Position property of a Servo motor.</para>
            <para>There is no limit on the number of servo position change handlers that can be registered for a particular Phidget.</para>
            </remarks>
        </member>
        <member name="T:Phidgets.PHSensorSensor">
             <summary>
             This class represents a Phidget PHSensor PH Sensor. All methods to read PH data from the PH Sensor are implemented in this class.
             </summary>
             <remarks>
             The Phidget PH Sensor provides one standard PH sensor input.
            </remarks>
        </member>
        <member name="F:Phidgets.PHSensorSensor.phid">
            <summary>
            The pointer for the referenced phidget that this input object relates to.
            </summary>
        </member>
        <member name="P:Phidgets.PHSensorSensor.PH">
            <summary>
            Gets the measured pH.
            </summary>
            <remarks>
            This value can range from about 0 - 14 for valid readings when the sensor is attached.
            </remarks>
            <value>The current pH</value>
            <returns>The current pH</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.PHSensorSensor.Sensitivity">
            <summary>
            Gets or sets the change trigger sensitivity.
            </summary>
            <remarks>
            This is how much the pH much change between successive PHChangeEvents. By default this value is set to 0.5.
            </remarks>
            <value>The change trigger sensitivity.</value>
            <returns>The change trigger sensitivity.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.PHSensorSensor.Potential">
            <summary>
            Gets the Potential, in volts.
            </summary>
            <remarks>
            This returns the actual voltage potential measured by the A/D A pH of 7.0 corresponts to a potential of 2.5v. This si the value that is internally used to calculate pH in the library.
            </remarks>
            <value>The Potential, in volts.</value>
            <returns>The Potential, in volts.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.PHSensorSensor.Temperature">
            <summary>
            Sets the probe temperature.
            </summary>
            <remarks>
            This temperature is used in calculating the PH, and can be set to ensure maximum accuracy.
            If this is not set, the default value of 25 degrees celcius is used.
            </remarks>
            <value>The probe temperature</value>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.InterfaceKitAnalogSensor">
            <summary>
            This class represents an analog sensor input for a Phidget InterfaceKit.  All the properties of an analog sensor input are stored and modified in this class.
            </summary>
            <remarks>
            A Phidget InterfaceKit analog sensor input object stores the analog sensor data for that input. The sensitivity of the analog sensor readings for the related input is implemented in this class.
            </remarks>
        </member>
        <member name="F:Phidgets.InterfaceKitAnalogSensor.phid">
            <summary>
            The pointer for the referenced phidget that this input object relates to.
            </summary>
        </member>
        <member name="F:Phidgets.InterfaceKitAnalogSensor.index">
            <summary>
            The index of this analog input.
            </summary>
            <remarks>
            On the Linear and Circular touch sensor Phidgets, analog input 0 represents position on the slider.
            </remarks>
        </member>
        <member name="M:Phidgets.InterfaceKitAnalogSensor.#ctor(Phidgets.InterfaceKit,System.Int32)">
            <summary>
            The AnalogSensor input constructor.
            </summary>
            <param name="phid">Reference to the InterfaceKit object for which this analog sensor input is related.</param>
            <param name="index">Index of the analog sensor input.</param>
        </member>
        <member name="P:Phidgets.InterfaceKitAnalogSensor.RawValue">
            <summary>
            Returns the raw value of a analog input.
            </summary>
            <remarks>This is a more accurate version of <see>Value</see>.  Note that the analog outputs on the Interface Kit 8/8/8 are only 10-bit values and this value represents an oversampling to 12-bit.</remarks>
            <value>The raw value of the sensor. The valid range is 0-4095.</value>
            <returns>The raw value of the sensor. The valid range is 0-4095.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="P:Phidgets.InterfaceKitAnalogSensor.Sensitivity">
            <summary>
            Gets or sets the change trigger sensitivity for an analog input.
            </summary>
            <remarks>
            This is the ammount that an inputs must change between successive SensorChangeEvents. This is based on the 0-1000 range provided by Value. This value is by default set to 10 for most Interface Kits with analog inputs.
            </remarks>
            <value>The current change trigger sinsitivity value.</value>
            <returns>The current change trigger sinsitivity value.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="P:Phidgets.InterfaceKitAnalogSensor.Value">
            <summary>
            Returns the value of a analog input.
            </summary>
            <remarks>
            The analog inputs are where analog sensors are attached on the InterfaceKit 8/8/8. On the Linear and Circular touch sensor Phidgets, analog input 0 represents position on the slider.
            </remarks>
            <value>The value of the sensor. The valid range is 0-1000.</value>
            <returns>The value of the sensor. The valid range is 0-1000.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="T:Phidgets.InterfaceKitAnalogSensorCollection">
            <summary>
            This class represents a collection of Analog Sensor Inputs. All the methods and properties used to access the available analog sensor inputs are implemented in this class.
            </summary>
            <remarks>
            This class contains the count of the available analog sensor inputs and the analog sensor input indexer to access the analog sensor inputs.
            </remarks>
        </member>
        <member name="F:Phidgets.InterfaceKitAnalogSensorCollection.phid">
            <summary>
            The pointer for the referenced phidget that this collection relates to.
            </summary>
        </member>
        <member name="F:Phidgets.InterfaceKitAnalogSensorCollection.numSensors">
            <summary>
            The count of total available analog sensor inputs related to the connected Phidget InterfaceKit board pointed to by the phid.
            </summary>
        </member>
        <member name="M:Phidgets.InterfaceKitAnalogSensorCollection.#ctor(Phidgets.InterfaceKit)">
            <summary>
            The Collection constructor.
            </summary>
            <remarks>
            Initializes the collection and counts the number of available analog sensor inputs.
            </remarks>
            <param name="phid">Reference to the InterfaceKit object that this collection belongs to.</param>
            <exception cref="T:Phidgets.PhidgetException">If there was a problem connecting to phidget21 or creating the internal handle. Also, if this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.InterfaceKitAnalogSensorCollection.Item(System.Int32)">
            <summary>
            The analog sensor input indexer list. This gets a reference to the analog sensor object stored at the supplied index locaiton in the collection list.
            </summary>
            <param name="index">The analog sensor input index.</param>
            <value>A reference to the analog sensor object stored at the supplied index location in the collection list.</value>
            <returns>A reference to the analog sensor object stored at the supplied index location in the collection list.</returns>
        </member>
        <member name="T:Phidgets.InterfaceKitDigitalInputCollection">
            <summary>
            This class represents a collection of Digital Inputs. All the methods and properties used to access the available digital inputs are implemented in this class.
            </summary>
            <remarks>
            This class contains the count of the available digital inputs and the digital input indexer to access the digital inputs.
            </remarks>
        </member>
        <member name="F:Phidgets.InterfaceKitDigitalInputCollection.phid">
            <summary>
            The pointer for the referenced phidget that this collection relates to.
            </summary>
        </member>
        <member name="F:Phidgets.InterfaceKitDigitalInputCollection.numInputs">
            <summary>
            The count of total available digital inputs related to the connected Phidget InterfaceKit board pointed to by the phid.
            </summary>
        </member>
        <member name="M:Phidgets.InterfaceKitDigitalInputCollection.#ctor(Phidgets.InterfaceKit)">
            <summary>
            The Collection constructor.
            </summary>
            <remarks>
            Initializes the collection and counts the number of available digital inputs.
            </remarks>
            <param name="phid">Reference to the InterfaceKit object that this collection belongs to.</param>
            <exception cref="T:Phidgets.PhidgetException">If there was a problem connecting to phidget21 or creating the internal handle. Also, if this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.InterfaceKitDigitalInputCollection.Item(System.Int32)">
            <summary>
            The digital input indexer list. This gets the state of a digital input at the supplied index in the list.
            </summary>
            <remarks>
            Digital inputs read True where they are activated and false when they are in their default state.
            </remarks>
            <param name="index">Index of the input.</param>
            <value>State of the input.</value>
            <returns>State of the input.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="P:Phidgets.InterfaceKitDigitalInputCollection.Count">
            <summary>
            Returns the number of ditigal inputs on this Interface Kit.
            </summary>
            <remarks>
            Not all interface kits have the same number of digital inputs, and some don't have any digital inputs at all.
            </remarks>
            <value>Number of digital inputs.</value>
            <returns>Number of digital inputs.</returns>
        </member>
        <member name="T:Phidgets.InterfaceKitDigitalOutputCollection">
            <summary>
            This class represents a collection of Digital Outputs. All the methods and properties used to access the available digital outputs are implemented in this class.
            </summary>
            <remarks>
            This class contains the count of the available digital outputs and the digital input indexer to access the digital outputs.
            </remarks>
        </member>
        <member name="F:Phidgets.InterfaceKitDigitalOutputCollection.phid">
            <summary>
            The pointer for the referenced phidget that this collection relates to.
            </summary>
        </member>
        <member name="F:Phidgets.InterfaceKitDigitalOutputCollection.numOutputs">
            <summary>
            The count of total available digital outputs related to the connected Phidget InterfaceKit board pointed to by the phid.
            </summary>
        </member>
        <member name="M:Phidgets.InterfaceKitDigitalOutputCollection.#ctor(Phidgets.InterfaceKit)">
            <summary>
            The Collection constructor.
            </summary>
            <remarks>
            Initializes the collection and counts the number of available digital outputs.
            </remarks>
            <param name="phid">Reference to the InterfaceKit object that this collection belongs to.</param>
            <exception cref="T:Phidgets.PhidgetException">If there was a problem connecting to phidget21 or creating the internal handle. Also, if this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.InterfaceKitDigitalOutputCollection.Item(System.Int32)">
            <summary>
            The digital output indexer list. This gets or sets the state of a digital output at the supplied index in the list.
            </summary>
            <remarks>
            Depending on the Phidget, this value may be either the value that you last wrote out to the Phidget, or the value that the Phidget last returned. This is because some Phidgets return their output state and others do not. This means that with some devices, reading the output state of a pin directly after setting it, may not return the value that you just set.
            </remarks>
            <param name="index">Index of the output.</param>
            <value>State of the output.</value>
            <returns>State of the output.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="P:Phidgets.InterfaceKitDigitalOutputCollection.Count">
            <summary>
            Returns the number of digital outputs on this Interface Kit.
            </summary>
            <remarks>
            Not all interface kits have the same number of digital outputs, and some don't have any digital outputs at all.
            </remarks>
            <value>Number of digital outputs.</value>
            <returns>Number of digital outputs</returns>
        </member>
    </members>
</doc>
